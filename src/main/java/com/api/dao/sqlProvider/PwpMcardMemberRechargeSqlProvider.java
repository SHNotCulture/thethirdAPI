package com.api.dao.sqlProvider;

import com.api.entity.PwpMcardMemberRecharge;
import com.api.entity.PwpMcardMemberRechargeCriteria;
import com.api.entity.PwpMcardMemberRechargeCriteria.Criteria;
import com.api.entity.PwpMcardMemberRechargeCriteria.Criterion;
import org.apache.ibatis.jdbc.SQL;

import java.util.List;
import java.util.Map;

public class PwpMcardMemberRechargeSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_mcard_member_recharge
     *
     * @mbg.generated
     */
    public String countByExample(PwpMcardMemberRechargeCriteria example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("pwp_mcard_member_recharge");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_mcard_member_recharge
     *
     * @mbg.generated
     */
    public String deleteByExample(PwpMcardMemberRechargeCriteria example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("pwp_mcard_member_recharge");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_mcard_member_recharge
     *
     * @mbg.generated
     */
    public String insertSelective(PwpMcardMemberRecharge record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("pwp_mcard_member_recharge");
        
        if (record.getId() != null) {
            sql.VALUES("id", "#{id,jdbcType=INTEGER}");
        }
        
        if (record.getParkId() != null) {
            sql.VALUES("park_id", "#{parkId,jdbcType=INTEGER}");
        }
        
        if (record.getMemberDetailId() != null) {
            sql.VALUES("member_detail_id", "#{memberDetailId,jdbcType=INTEGER}");
        }
        
        if (record.getMcardMemberId() != null) {
            sql.VALUES("mcard_member_id", "#{mcardMemberId,jdbcType=INTEGER}");
        }
        
        if (record.getCarNum() != null) {
            sql.VALUES("car_num", "#{carNum,jdbcType=VARCHAR}");
        }
        
        if (record.getRechargeType() != null) {
            sql.VALUES("recharge_type", "#{rechargeType,jdbcType=TINYINT}");
        }
        
        if (record.getNum() != null) {
            sql.VALUES("num", "#{num,jdbcType=INTEGER}");
        }
        
        if (record.getCost() != null) {
            sql.VALUES("cost", "#{cost,jdbcType=DECIMAL}");
        }
        
        if (record.getNeedPay() != null) {
            sql.VALUES("need_pay", "#{needPay,jdbcType=DECIMAL}");
        }
        
        if (record.getRemark() != null) {
            sql.VALUES("remark", "#{remark,jdbcType=VARCHAR}");
        }
        
        if (record.getBeginDate() != null) {
            sql.VALUES("begin_date", "#{beginDate,jdbcType=VARCHAR}");
        }
        
        if (record.getEndDate() != null) {
            sql.VALUES("end_date", "#{endDate,jdbcType=VARCHAR}");
        }
        
        if (record.getRechargeNo() != null) {
            sql.VALUES("recharge_no", "#{rechargeNo,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateTime() != null) {
            sql.VALUES("create_time", "#{createTime,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.VALUES("update_time", "#{updateTime,jdbcType=VARCHAR}");
        }
        
        if (record.getMcardPayType() != null) {
            sql.VALUES("mcard_pay_type", "#{mcardPayType,jdbcType=TINYINT}");
        }
        
        if (record.getPayTypeId() != null) {
            sql.VALUES("pay_type_id", "#{payTypeId,jdbcType=TINYINT}");
        }
        
        if (record.getPayStatus() != null) {
            sql.VALUES("pay_status", "#{payStatus,jdbcType=TINYINT}");
        }
        
        if (record.getOperator() != null) {
            sql.VALUES("operator", "#{operator,jdbcType=VARCHAR}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_mcard_member_recharge
     *
     * @mbg.generated
     */
    public String selectByExample(PwpMcardMemberRechargeCriteria example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("id");
        } else {
            sql.SELECT("id");
        }
        sql.SELECT("park_id");
        sql.SELECT("member_detail_id");
        sql.SELECT("mcard_member_id");
        sql.SELECT("car_num");
        sql.SELECT("recharge_type");
        sql.SELECT("num");
        sql.SELECT("cost");
        sql.SELECT("need_pay");
        sql.SELECT("remark");
        sql.SELECT("begin_date");
        sql.SELECT("end_date");
        sql.SELECT("recharge_no");
        sql.SELECT("create_time");
        sql.SELECT("update_time");
        sql.SELECT("mcard_pay_type");
        sql.SELECT("pay_type_id");
        sql.SELECT("pay_status");
        sql.SELECT("operator");
        sql.FROM("pwp_mcard_member_recharge");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_mcard_member_recharge
     *
     * @mbg.generated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        PwpMcardMemberRecharge record = (PwpMcardMemberRecharge) parameter.get("record");
        PwpMcardMemberRechargeCriteria example = (PwpMcardMemberRechargeCriteria) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("pwp_mcard_member_recharge");
        
        if (record.getId() != null) {
            sql.SET("id = #{record.id,jdbcType=INTEGER}");
        }
        
        if (record.getParkId() != null) {
            sql.SET("park_id = #{record.parkId,jdbcType=INTEGER}");
        }
        
        if (record.getMemberDetailId() != null) {
            sql.SET("member_detail_id = #{record.memberDetailId,jdbcType=INTEGER}");
        }
        
        if (record.getMcardMemberId() != null) {
            sql.SET("mcard_member_id = #{record.mcardMemberId,jdbcType=INTEGER}");
        }
        
        if (record.getCarNum() != null) {
            sql.SET("car_num = #{record.carNum,jdbcType=VARCHAR}");
        }
        
        if (record.getRechargeType() != null) {
            sql.SET("recharge_type = #{record.rechargeType,jdbcType=TINYINT}");
        }
        
        if (record.getNum() != null) {
            sql.SET("num = #{record.num,jdbcType=INTEGER}");
        }
        
        if (record.getCost() != null) {
            sql.SET("cost = #{record.cost,jdbcType=DECIMAL}");
        }
        
        if (record.getNeedPay() != null) {
            sql.SET("need_pay = #{record.needPay,jdbcType=DECIMAL}");
        }
        
        if (record.getRemark() != null) {
            sql.SET("remark = #{record.remark,jdbcType=VARCHAR}");
        }
        
        if (record.getBeginDate() != null) {
            sql.SET("begin_date = #{record.beginDate,jdbcType=VARCHAR}");
        }
        
        if (record.getEndDate() != null) {
            sql.SET("end_date = #{record.endDate,jdbcType=VARCHAR}");
        }
        
        if (record.getRechargeNo() != null) {
            sql.SET("recharge_no = #{record.rechargeNo,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{record.createTime,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.SET("update_time = #{record.updateTime,jdbcType=VARCHAR}");
        }
        
        if (record.getMcardPayType() != null) {
            sql.SET("mcard_pay_type = #{record.mcardPayType,jdbcType=TINYINT}");
        }
        
        if (record.getPayTypeId() != null) {
            sql.SET("pay_type_id = #{record.payTypeId,jdbcType=TINYINT}");
        }
        
        if (record.getPayStatus() != null) {
            sql.SET("pay_status = #{record.payStatus,jdbcType=TINYINT}");
        }
        
        if (record.getOperator() != null) {
            sql.SET("operator = #{record.operator,jdbcType=VARCHAR}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_mcard_member_recharge
     *
     * @mbg.generated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("pwp_mcard_member_recharge");
        
        sql.SET("id = #{record.id,jdbcType=INTEGER}");
        sql.SET("park_id = #{record.parkId,jdbcType=INTEGER}");
        sql.SET("member_detail_id = #{record.memberDetailId,jdbcType=INTEGER}");
        sql.SET("mcard_member_id = #{record.mcardMemberId,jdbcType=INTEGER}");
        sql.SET("car_num = #{record.carNum,jdbcType=VARCHAR}");
        sql.SET("recharge_type = #{record.rechargeType,jdbcType=TINYINT}");
        sql.SET("num = #{record.num,jdbcType=INTEGER}");
        sql.SET("cost = #{record.cost,jdbcType=DECIMAL}");
        sql.SET("need_pay = #{record.needPay,jdbcType=DECIMAL}");
        sql.SET("remark = #{record.remark,jdbcType=VARCHAR}");
        sql.SET("begin_date = #{record.beginDate,jdbcType=VARCHAR}");
        sql.SET("end_date = #{record.endDate,jdbcType=VARCHAR}");
        sql.SET("recharge_no = #{record.rechargeNo,jdbcType=VARCHAR}");
        sql.SET("create_time = #{record.createTime,jdbcType=VARCHAR}");
        sql.SET("update_time = #{record.updateTime,jdbcType=VARCHAR}");
        sql.SET("mcard_pay_type = #{record.mcardPayType,jdbcType=TINYINT}");
        sql.SET("pay_type_id = #{record.payTypeId,jdbcType=TINYINT}");
        sql.SET("pay_status = #{record.payStatus,jdbcType=TINYINT}");
        sql.SET("operator = #{record.operator,jdbcType=VARCHAR}");
        
        PwpMcardMemberRechargeCriteria example = (PwpMcardMemberRechargeCriteria) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_mcard_member_recharge
     *
     * @mbg.generated
     */
    public String updateByPrimaryKeySelective(PwpMcardMemberRecharge record) {
        SQL sql = new SQL();
        sql.UPDATE("pwp_mcard_member_recharge");
        
        if (record.getParkId() != null) {
            sql.SET("park_id = #{parkId,jdbcType=INTEGER}");
        }
        
        if (record.getMemberDetailId() != null) {
            sql.SET("member_detail_id = #{memberDetailId,jdbcType=INTEGER}");
        }
        
        if (record.getMcardMemberId() != null) {
            sql.SET("mcard_member_id = #{mcardMemberId,jdbcType=INTEGER}");
        }
        
        if (record.getCarNum() != null) {
            sql.SET("car_num = #{carNum,jdbcType=VARCHAR}");
        }
        
        if (record.getRechargeType() != null) {
            sql.SET("recharge_type = #{rechargeType,jdbcType=TINYINT}");
        }
        
        if (record.getNum() != null) {
            sql.SET("num = #{num,jdbcType=INTEGER}");
        }
        
        if (record.getCost() != null) {
            sql.SET("cost = #{cost,jdbcType=DECIMAL}");
        }
        
        if (record.getNeedPay() != null) {
            sql.SET("need_pay = #{needPay,jdbcType=DECIMAL}");
        }
        
        if (record.getRemark() != null) {
            sql.SET("remark = #{remark,jdbcType=VARCHAR}");
        }
        
        if (record.getBeginDate() != null) {
            sql.SET("begin_date = #{beginDate,jdbcType=VARCHAR}");
        }
        
        if (record.getEndDate() != null) {
            sql.SET("end_date = #{endDate,jdbcType=VARCHAR}");
        }
        
        if (record.getRechargeNo() != null) {
            sql.SET("recharge_no = #{rechargeNo,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{createTime,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.SET("update_time = #{updateTime,jdbcType=VARCHAR}");
        }
        
        if (record.getMcardPayType() != null) {
            sql.SET("mcard_pay_type = #{mcardPayType,jdbcType=TINYINT}");
        }
        
        if (record.getPayTypeId() != null) {
            sql.SET("pay_type_id = #{payTypeId,jdbcType=TINYINT}");
        }
        
        if (record.getPayStatus() != null) {
            sql.SET("pay_status = #{payStatus,jdbcType=TINYINT}");
        }
        
        if (record.getOperator() != null) {
            sql.SET("operator = #{operator,jdbcType=VARCHAR}");
        }
        
        sql.WHERE("id = #{id,jdbcType=INTEGER}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_mcard_member_recharge
     *
     * @mbg.generated
     */
    protected void applyWhere(SQL sql, PwpMcardMemberRechargeCriteria example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}