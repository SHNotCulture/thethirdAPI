package com.api.dao.sqlProvider;

import com.api.entity.PwpPark;
import com.api.entity.PwpParkCriteria;
import com.api.entity.PwpParkCriteria.Criteria;
import com.api.entity.PwpParkCriteria.Criterion;
import org.apache.ibatis.jdbc.SQL;

import java.util.List;
import java.util.Map;

public class PwpParkSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_park
     *
     * @mbg.generated
     */
    public String countByExample(PwpParkCriteria example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("pwp_park");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_park
     *
     * @mbg.generated
     */
    public String deleteByExample(PwpParkCriteria example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("pwp_park");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_park
     *
     * @mbg.generated
     */
    public String insertSelective(PwpPark record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("pwp_park");
        
        if (record.getId() != null) {
            sql.VALUES("id", "#{id,jdbcType=INTEGER}");
        }
        
        if (record.getLeagueId() != null) {
            sql.VALUES("league_id", "#{leagueId,jdbcType=INTEGER}");
        }
        
        if (record.getName() != null) {
            sql.VALUES("name", "#{name,jdbcType=VARCHAR}");
        }
        
        if (record.getDomain() != null) {
            sql.VALUES("domain", "#{domain,jdbcType=VARCHAR}");
        }
        
        if (record.getParkNum() != null) {
            sql.VALUES("park_num", "#{parkNum,jdbcType=INTEGER}");
        }
        
        if (record.getTotalNum() != null) {
            sql.VALUES("total_num", "#{totalNum,jdbcType=INTEGER}");
        }
        
        if (record.getParkType() != null) {
            sql.VALUES("park_type", "#{parkType,jdbcType=TINYINT}");
        }
        
        if (record.getAddress() != null) {
            sql.VALUES("address", "#{address,jdbcType=VARCHAR}");
        }
        
        if (record.getPositionX() != null) {
            sql.VALUES("position_x", "#{positionX,jdbcType=VARCHAR}");
        }
        
        if (record.getPositionY() != null) {
            sql.VALUES("position_y", "#{positionY,jdbcType=VARCHAR}");
        }
        
        if (record.getPhoto() != null) {
            sql.VALUES("photo", "#{photo,jdbcType=VARCHAR}");
        }
        
        if (record.getParkPlan() != null) {
            sql.VALUES("park_plan", "#{parkPlan,jdbcType=VARCHAR}");
        }
        
        if (record.getDescript() != null) {
            sql.VALUES("descript", "#{descript,jdbcType=VARCHAR}");
        }
        
        if (record.getSystemRatio() != null) {
            sql.VALUES("system_ratio", "#{systemRatio,jdbcType=DECIMAL}");
        }
        
        if (record.getBankName() != null) {
            sql.VALUES("bank_name", "#{bankName,jdbcType=VARCHAR}");
        }
        
        if (record.getBankAccount() != null) {
            sql.VALUES("bank_account", "#{bankAccount,jdbcType=VARCHAR}");
        }
        
        if (record.getBankCard() != null) {
            sql.VALUES("bank_card", "#{bankCard,jdbcType=VARCHAR}");
        }
        
        if (record.getMonthRule() != null) {
            sql.VALUES("month_rule", "#{monthRule,jdbcType=INTEGER}");
        }
        
        if (record.getParkStatus() != null) {
            sql.VALUES("park_status", "#{parkStatus,jdbcType=TINYINT}");
        }
        
        if (record.getExternalAccount() != null) {
            sql.VALUES("external_account", "#{externalAccount,jdbcType=VARCHAR}");
        }
        
        if (record.getLocalRequestKey() != null) {
            sql.VALUES("local_request_key", "#{localRequestKey,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateTime() != null) {
            sql.VALUES("create_time", "#{createTime,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.VALUES("update_time", "#{updateTime,jdbcType=VARCHAR}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_park
     *
     * @mbg.generated
     */
    public String selectByExample(PwpParkCriteria example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("id");
        } else {
            sql.SELECT("id");
        }
        sql.SELECT("league_id");
        sql.SELECT("name");
        sql.SELECT("domain");
        sql.SELECT("park_num");
        sql.SELECT("total_num");
        sql.SELECT("park_type");
        sql.SELECT("address");
        sql.SELECT("position_x");
        sql.SELECT("position_y");
        sql.SELECT("photo");
        sql.SELECT("park_plan");
        sql.SELECT("descript");
        sql.SELECT("system_ratio");
        sql.SELECT("bank_name");
        sql.SELECT("bank_account");
        sql.SELECT("bank_card");
        sql.SELECT("month_rule");
        sql.SELECT("park_status");
        sql.SELECT("external_account");
        sql.SELECT("local_request_key");
        sql.SELECT("create_time");
        sql.SELECT("update_time");
        sql.FROM("pwp_park");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_park
     *
     * @mbg.generated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        PwpPark record = (PwpPark) parameter.get("record");
        PwpParkCriteria example = (PwpParkCriteria) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("pwp_park");
        
        if (record.getId() != null) {
            sql.SET("id = #{record.id,jdbcType=INTEGER}");
        }
        
        if (record.getLeagueId() != null) {
            sql.SET("league_id = #{record.leagueId,jdbcType=INTEGER}");
        }
        
        if (record.getName() != null) {
            sql.SET("name = #{record.name,jdbcType=VARCHAR}");
        }
        
        if (record.getDomain() != null) {
            sql.SET("domain = #{record.domain,jdbcType=VARCHAR}");
        }
        
        if (record.getParkNum() != null) {
            sql.SET("park_num = #{record.parkNum,jdbcType=INTEGER}");
        }
        
        if (record.getTotalNum() != null) {
            sql.SET("total_num = #{record.totalNum,jdbcType=INTEGER}");
        }
        
        if (record.getParkType() != null) {
            sql.SET("park_type = #{record.parkType,jdbcType=TINYINT}");
        }
        
        if (record.getAddress() != null) {
            sql.SET("address = #{record.address,jdbcType=VARCHAR}");
        }
        
        if (record.getPositionX() != null) {
            sql.SET("position_x = #{record.positionX,jdbcType=VARCHAR}");
        }
        
        if (record.getPositionY() != null) {
            sql.SET("position_y = #{record.positionY,jdbcType=VARCHAR}");
        }
        
        if (record.getPhoto() != null) {
            sql.SET("photo = #{record.photo,jdbcType=VARCHAR}");
        }
        
        if (record.getParkPlan() != null) {
            sql.SET("park_plan = #{record.parkPlan,jdbcType=VARCHAR}");
        }
        
        if (record.getDescript() != null) {
            sql.SET("descript = #{record.descript,jdbcType=VARCHAR}");
        }
        
        if (record.getSystemRatio() != null) {
            sql.SET("system_ratio = #{record.systemRatio,jdbcType=DECIMAL}");
        }
        
        if (record.getBankName() != null) {
            sql.SET("bank_name = #{record.bankName,jdbcType=VARCHAR}");
        }
        
        if (record.getBankAccount() != null) {
            sql.SET("bank_account = #{record.bankAccount,jdbcType=VARCHAR}");
        }
        
        if (record.getBankCard() != null) {
            sql.SET("bank_card = #{record.bankCard,jdbcType=VARCHAR}");
        }
        
        if (record.getMonthRule() != null) {
            sql.SET("month_rule = #{record.monthRule,jdbcType=INTEGER}");
        }
        
        if (record.getParkStatus() != null) {
            sql.SET("park_status = #{record.parkStatus,jdbcType=TINYINT}");
        }
        
        if (record.getExternalAccount() != null) {
            sql.SET("external_account = #{record.externalAccount,jdbcType=VARCHAR}");
        }
        
        if (record.getLocalRequestKey() != null) {
            sql.SET("local_request_key = #{record.localRequestKey,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{record.createTime,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.SET("update_time = #{record.updateTime,jdbcType=VARCHAR}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_park
     *
     * @mbg.generated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("pwp_park");
        
        sql.SET("id = #{record.id,jdbcType=INTEGER}");
        sql.SET("league_id = #{record.leagueId,jdbcType=INTEGER}");
        sql.SET("name = #{record.name,jdbcType=VARCHAR}");
        sql.SET("domain = #{record.domain,jdbcType=VARCHAR}");
        sql.SET("park_num = #{record.parkNum,jdbcType=INTEGER}");
        sql.SET("total_num = #{record.totalNum,jdbcType=INTEGER}");
        sql.SET("park_type = #{record.parkType,jdbcType=TINYINT}");
        sql.SET("address = #{record.address,jdbcType=VARCHAR}");
        sql.SET("position_x = #{record.positionX,jdbcType=VARCHAR}");
        sql.SET("position_y = #{record.positionY,jdbcType=VARCHAR}");
        sql.SET("photo = #{record.photo,jdbcType=VARCHAR}");
        sql.SET("park_plan = #{record.parkPlan,jdbcType=VARCHAR}");
        sql.SET("descript = #{record.descript,jdbcType=VARCHAR}");
        sql.SET("system_ratio = #{record.systemRatio,jdbcType=DECIMAL}");
        sql.SET("bank_name = #{record.bankName,jdbcType=VARCHAR}");
        sql.SET("bank_account = #{record.bankAccount,jdbcType=VARCHAR}");
        sql.SET("bank_card = #{record.bankCard,jdbcType=VARCHAR}");
        sql.SET("month_rule = #{record.monthRule,jdbcType=INTEGER}");
        sql.SET("park_status = #{record.parkStatus,jdbcType=TINYINT}");
        sql.SET("external_account = #{record.externalAccount,jdbcType=VARCHAR}");
        sql.SET("local_request_key = #{record.localRequestKey,jdbcType=VARCHAR}");
        sql.SET("create_time = #{record.createTime,jdbcType=VARCHAR}");
        sql.SET("update_time = #{record.updateTime,jdbcType=VARCHAR}");
        
        PwpParkCriteria example = (PwpParkCriteria) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_park
     *
     * @mbg.generated
     */
    public String updateByPrimaryKeySelective(PwpPark record) {
        SQL sql = new SQL();
        sql.UPDATE("pwp_park");
        
        if (record.getLeagueId() != null) {
            sql.SET("league_id = #{leagueId,jdbcType=INTEGER}");
        }
        
        if (record.getName() != null) {
            sql.SET("name = #{name,jdbcType=VARCHAR}");
        }
        
        if (record.getDomain() != null) {
            sql.SET("domain = #{domain,jdbcType=VARCHAR}");
        }
        
        if (record.getParkNum() != null) {
            sql.SET("park_num = #{parkNum,jdbcType=INTEGER}");
        }
        
        if (record.getTotalNum() != null) {
            sql.SET("total_num = #{totalNum,jdbcType=INTEGER}");
        }
        
        if (record.getParkType() != null) {
            sql.SET("park_type = #{parkType,jdbcType=TINYINT}");
        }
        
        if (record.getAddress() != null) {
            sql.SET("address = #{address,jdbcType=VARCHAR}");
        }
        
        if (record.getPositionX() != null) {
            sql.SET("position_x = #{positionX,jdbcType=VARCHAR}");
        }
        
        if (record.getPositionY() != null) {
            sql.SET("position_y = #{positionY,jdbcType=VARCHAR}");
        }
        
        if (record.getPhoto() != null) {
            sql.SET("photo = #{photo,jdbcType=VARCHAR}");
        }
        
        if (record.getParkPlan() != null) {
            sql.SET("park_plan = #{parkPlan,jdbcType=VARCHAR}");
        }
        
        if (record.getDescript() != null) {
            sql.SET("descript = #{descript,jdbcType=VARCHAR}");
        }
        
        if (record.getSystemRatio() != null) {
            sql.SET("system_ratio = #{systemRatio,jdbcType=DECIMAL}");
        }
        
        if (record.getBankName() != null) {
            sql.SET("bank_name = #{bankName,jdbcType=VARCHAR}");
        }
        
        if (record.getBankAccount() != null) {
            sql.SET("bank_account = #{bankAccount,jdbcType=VARCHAR}");
        }
        
        if (record.getBankCard() != null) {
            sql.SET("bank_card = #{bankCard,jdbcType=VARCHAR}");
        }
        
        if (record.getMonthRule() != null) {
            sql.SET("month_rule = #{monthRule,jdbcType=INTEGER}");
        }
        
        if (record.getParkStatus() != null) {
            sql.SET("park_status = #{parkStatus,jdbcType=TINYINT}");
        }
        
        if (record.getExternalAccount() != null) {
            sql.SET("external_account = #{externalAccount,jdbcType=VARCHAR}");
        }
        
        if (record.getLocalRequestKey() != null) {
            sql.SET("local_request_key = #{localRequestKey,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{createTime,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.SET("update_time = #{updateTime,jdbcType=VARCHAR}");
        }
        
        sql.WHERE("id = #{id,jdbcType=INTEGER}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_park
     *
     * @mbg.generated
     */
    protected void applyWhere(SQL sql, PwpParkCriteria example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}