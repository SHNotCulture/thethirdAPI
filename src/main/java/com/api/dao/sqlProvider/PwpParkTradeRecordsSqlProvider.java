package com.api.dao.sqlProvider;

import com.api.entity.PwpParkTradeRecords;
import com.api.entity.PwpParkTradeRecordsCriteria;
import com.api.entity.PwpParkTradeRecordsCriteria.Criteria;
import com.api.entity.PwpParkTradeRecordsCriteria.Criterion;
import org.apache.ibatis.jdbc.SQL;

import java.util.List;
import java.util.Map;

public class PwpParkTradeRecordsSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_park_trade_records
     *
     * @mbg.generated
     */
    public String countByExample(PwpParkTradeRecordsCriteria example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("pwp_park_trade_records");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_park_trade_records
     *
     * @mbg.generated
     */
    public String deleteByExample(PwpParkTradeRecordsCriteria example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("pwp_park_trade_records");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_park_trade_records
     *
     * @mbg.generated
     */
    public String insertSelective(PwpParkTradeRecords record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("pwp_park_trade_records");
        
        if (record.getId() != null) {
            sql.VALUES("id", "#{id,jdbcType=INTEGER}");
        }
        
        if (record.getActualPay() != null) {
            sql.VALUES("actual_pay", "#{actualPay,jdbcType=DOUBLE}");
        }
        
        if (record.getBalance() != null) {
            sql.VALUES("balance", "#{balance,jdbcType=DOUBLE}");
        }
        
        if (record.getCarCardNo() != null) {
            sql.VALUES("car_card_no", "#{carCardNo,jdbcType=VARCHAR}");
        }
        
        if (record.getCarNum() != null) {
            sql.VALUES("car_num", "#{carNum,jdbcType=VARCHAR}");
        }
        
        if (record.getCarNumIn() != null) {
            sql.VALUES("car_num_in", "#{carNumIn,jdbcType=VARCHAR}");
        }
        
        if (record.getCarNumOut() != null) {
            sql.VALUES("car_num_out", "#{carNumOut,jdbcType=VARCHAR}");
        }
        
        if (record.getCarType() != null) {
            sql.VALUES("car_type", "#{carType,jdbcType=SMALLINT}");
        }
        
        if (record.getClientId() != null) {
            sql.VALUES("client_id", "#{clientId,jdbcType=INTEGER}");
        }
        
        if (record.getCouponCode() != null) {
            sql.VALUES("coupon_code", "#{couponCode,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateTime() != null) {
            sql.VALUES("create_time", "#{createTime,jdbcType=VARCHAR}");
        }
        
        if (record.getDriverCardIn() != null) {
            sql.VALUES("driver_card_in", "#{driverCardIn,jdbcType=VARCHAR}");
        }
        
        if (record.getDriverCardNo() != null) {
            sql.VALUES("driver_card_no", "#{driverCardNo,jdbcType=VARCHAR}");
        }
        
        if (record.getDriverCardOut() != null) {
            sql.VALUES("driver_card_out", "#{driverCardOut,jdbcType=VARCHAR}");
        }
        
        if (record.getEnableCash() != null) {
            sql.VALUES("enable_cash", "#{enableCash,jdbcType=SMALLINT}");
        }
        
        if (record.getEndTime() != null) {
            sql.VALUES("end_time", "#{endTime,jdbcType=VARCHAR}");
        }
        
        if (record.getFeeType() != null) {
            sql.VALUES("fee_type", "#{feeType,jdbcType=SMALLINT}");
        }
        
        if (record.getMcardMemberId() != null) {
            sql.VALUES("mcard_member_id", "#{mcardMemberId,jdbcType=INTEGER}");
        }
        
        if (record.getMemberDetailId() != null) {
            sql.VALUES("member_detail_id", "#{memberDetailId,jdbcType=INTEGER}");
        }
        
        if (record.getMerchantDiscount() != null) {
            sql.VALUES("merchant_discount", "#{merchantDiscount,jdbcType=DOUBLE}");
        }
        
        if (record.getNeedPay() != null) {
            sql.VALUES("need_pay", "#{needPay,jdbcType=DOUBLE}");
        }
        
        if (record.getOpenGateIn() != null) {
            sql.VALUES("open_gate_in", "#{openGateIn,jdbcType=VARCHAR}");
        }
        
        if (record.getOpenGateOut() != null) {
            sql.VALUES("open_gate_out", "#{openGateOut,jdbcType=VARCHAR}");
        }
        
        if (record.getParkId() != null) {
            sql.VALUES("park_id", "#{parkId,jdbcType=INTEGER}");
        }
        
        if (record.getParkStatus() != null) {
            sql.VALUES("park_status", "#{parkStatus,jdbcType=BIT}");
        }
        
        if (record.getParkinType() != null) {
            sql.VALUES("parkin_type", "#{parkinType,jdbcType=SMALLINT}");
        }
        
        if (record.getParkingInImg() != null) {
            sql.VALUES("parking_in_img", "#{parkingInImg,jdbcType=VARCHAR}");
        }
        
        if (record.getParkingOutImg() != null) {
            sql.VALUES("parking_out_img", "#{parkingOutImg,jdbcType=VARCHAR}");
        }
        
        if (record.getParkingOutType() != null) {
            sql.VALUES("parking_out_type", "#{parkingOutType,jdbcType=SMALLINT}");
        }
        
        if (record.getPortIdIn() != null) {
            sql.VALUES("port_id_in", "#{portIdIn,jdbcType=VARCHAR}");
        }
        
        if (record.getPortIdOut() != null) {
            sql.VALUES("port_id_out", "#{portIdOut,jdbcType=VARCHAR}");
        }
        
        if (record.getStartTime() != null) {
            sql.VALUES("start_time", "#{startTime,jdbcType=VARCHAR}");
        }
        
        if (record.getTradeNo() != null) {
            sql.VALUES("trade_no", "#{tradeNo,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.VALUES("update_time", "#{updateTime,jdbcType=VARCHAR}");
        }
        
        if (record.getUserId() != null) {
            sql.VALUES("user_id", "#{userId,jdbcType=INTEGER}");
        }
        
        if (record.getUserName() != null) {
            sql.VALUES("user_name", "#{userName,jdbcType=VARCHAR}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_park_trade_records
     *
     * @mbg.generated
     */
    public String selectByExample(PwpParkTradeRecordsCriteria example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("id");
        } else {
            sql.SELECT("id");
        }
        sql.SELECT("actual_pay");
        sql.SELECT("balance");
        sql.SELECT("car_card_no");
        sql.SELECT("car_num");
        sql.SELECT("car_num_in");
        sql.SELECT("car_num_out");
        sql.SELECT("car_type");
        sql.SELECT("client_id");
        sql.SELECT("coupon_code");
        sql.SELECT("create_time");
        sql.SELECT("driver_card_in");
        sql.SELECT("driver_card_no");
        sql.SELECT("driver_card_out");
        sql.SELECT("enable_cash");
        sql.SELECT("end_time");
        sql.SELECT("fee_type");
        sql.SELECT("mcard_member_id");
        sql.SELECT("member_detail_id");
        sql.SELECT("merchant_discount");
        sql.SELECT("need_pay");
        sql.SELECT("open_gate_in");
        sql.SELECT("open_gate_out");
        sql.SELECT("park_id");
        sql.SELECT("park_status");
        sql.SELECT("parkin_type");
        sql.SELECT("parking_in_img");
        sql.SELECT("parking_out_img");
        sql.SELECT("parking_out_type");
        sql.SELECT("port_id_in");
        sql.SELECT("port_id_out");
        sql.SELECT("start_time");
        sql.SELECT("trade_no");
        sql.SELECT("update_time");
        sql.SELECT("user_id");
        sql.SELECT("user_name");
        sql.FROM("pwp_park_trade_records");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_park_trade_records
     *
     * @mbg.generated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        PwpParkTradeRecords record = (PwpParkTradeRecords) parameter.get("record");
        PwpParkTradeRecordsCriteria example = (PwpParkTradeRecordsCriteria) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("pwp_park_trade_records");
        
        if (record.getId() != null) {
            sql.SET("id = #{record.id,jdbcType=INTEGER}");
        }
        
        if (record.getActualPay() != null) {
            sql.SET("actual_pay = #{record.actualPay,jdbcType=DOUBLE}");
        }
        
        if (record.getBalance() != null) {
            sql.SET("balance = #{record.balance,jdbcType=DOUBLE}");
        }
        
        if (record.getCarCardNo() != null) {
            sql.SET("car_card_no = #{record.carCardNo,jdbcType=VARCHAR}");
        }
        
        if (record.getCarNum() != null) {
            sql.SET("car_num = #{record.carNum,jdbcType=VARCHAR}");
        }
        
        if (record.getCarNumIn() != null) {
            sql.SET("car_num_in = #{record.carNumIn,jdbcType=VARCHAR}");
        }
        
        if (record.getCarNumOut() != null) {
            sql.SET("car_num_out = #{record.carNumOut,jdbcType=VARCHAR}");
        }
        
        if (record.getCarType() != null) {
            sql.SET("car_type = #{record.carType,jdbcType=SMALLINT}");
        }
        
        if (record.getClientId() != null) {
            sql.SET("client_id = #{record.clientId,jdbcType=INTEGER}");
        }
        
        if (record.getCouponCode() != null) {
            sql.SET("coupon_code = #{record.couponCode,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{record.createTime,jdbcType=VARCHAR}");
        }
        
        if (record.getDriverCardIn() != null) {
            sql.SET("driver_card_in = #{record.driverCardIn,jdbcType=VARCHAR}");
        }
        
        if (record.getDriverCardNo() != null) {
            sql.SET("driver_card_no = #{record.driverCardNo,jdbcType=VARCHAR}");
        }
        
        if (record.getDriverCardOut() != null) {
            sql.SET("driver_card_out = #{record.driverCardOut,jdbcType=VARCHAR}");
        }
        
        if (record.getEnableCash() != null) {
            sql.SET("enable_cash = #{record.enableCash,jdbcType=SMALLINT}");
        }
        
        if (record.getEndTime() != null) {
            sql.SET("end_time = #{record.endTime,jdbcType=VARCHAR}");
        }
        
        if (record.getFeeType() != null) {
            sql.SET("fee_type = #{record.feeType,jdbcType=SMALLINT}");
        }
        
        if (record.getMcardMemberId() != null) {
            sql.SET("mcard_member_id = #{record.mcardMemberId,jdbcType=INTEGER}");
        }
        
        if (record.getMemberDetailId() != null) {
            sql.SET("member_detail_id = #{record.memberDetailId,jdbcType=INTEGER}");
        }
        
        if (record.getMerchantDiscount() != null) {
            sql.SET("merchant_discount = #{record.merchantDiscount,jdbcType=DOUBLE}");
        }
        
        if (record.getNeedPay() != null) {
            sql.SET("need_pay = #{record.needPay,jdbcType=DOUBLE}");
        }
        
        if (record.getOpenGateIn() != null) {
            sql.SET("open_gate_in = #{record.openGateIn,jdbcType=VARCHAR}");
        }
        
        if (record.getOpenGateOut() != null) {
            sql.SET("open_gate_out = #{record.openGateOut,jdbcType=VARCHAR}");
        }
        
        if (record.getParkId() != null) {
            sql.SET("park_id = #{record.parkId,jdbcType=INTEGER}");
        }
        
        if (record.getParkStatus() != null) {
            sql.SET("park_status = #{record.parkStatus,jdbcType=BIT}");
        }
        
        if (record.getParkinType() != null) {
            sql.SET("parkin_type = #{record.parkinType,jdbcType=SMALLINT}");
        }
        
        if (record.getParkingInImg() != null) {
            sql.SET("parking_in_img = #{record.parkingInImg,jdbcType=VARCHAR}");
        }
        
        if (record.getParkingOutImg() != null) {
            sql.SET("parking_out_img = #{record.parkingOutImg,jdbcType=VARCHAR}");
        }
        
        if (record.getParkingOutType() != null) {
            sql.SET("parking_out_type = #{record.parkingOutType,jdbcType=SMALLINT}");
        }
        
        if (record.getPortIdIn() != null) {
            sql.SET("port_id_in = #{record.portIdIn,jdbcType=VARCHAR}");
        }
        
        if (record.getPortIdOut() != null) {
            sql.SET("port_id_out = #{record.portIdOut,jdbcType=VARCHAR}");
        }
        
        if (record.getStartTime() != null) {
            sql.SET("start_time = #{record.startTime,jdbcType=VARCHAR}");
        }
        
        if (record.getTradeNo() != null) {
            sql.SET("trade_no = #{record.tradeNo,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.SET("update_time = #{record.updateTime,jdbcType=VARCHAR}");
        }
        
        if (record.getUserId() != null) {
            sql.SET("user_id = #{record.userId,jdbcType=INTEGER}");
        }
        
        if (record.getUserName() != null) {
            sql.SET("user_name = #{record.userName,jdbcType=VARCHAR}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_park_trade_records
     *
     * @mbg.generated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("pwp_park_trade_records");
        
        sql.SET("id = #{record.id,jdbcType=INTEGER}");
        sql.SET("actual_pay = #{record.actualPay,jdbcType=DOUBLE}");
        sql.SET("balance = #{record.balance,jdbcType=DOUBLE}");
        sql.SET("car_card_no = #{record.carCardNo,jdbcType=VARCHAR}");
        sql.SET("car_num = #{record.carNum,jdbcType=VARCHAR}");
        sql.SET("car_num_in = #{record.carNumIn,jdbcType=VARCHAR}");
        sql.SET("car_num_out = #{record.carNumOut,jdbcType=VARCHAR}");
        sql.SET("car_type = #{record.carType,jdbcType=SMALLINT}");
        sql.SET("client_id = #{record.clientId,jdbcType=INTEGER}");
        sql.SET("coupon_code = #{record.couponCode,jdbcType=VARCHAR}");
        sql.SET("create_time = #{record.createTime,jdbcType=VARCHAR}");
        sql.SET("driver_card_in = #{record.driverCardIn,jdbcType=VARCHAR}");
        sql.SET("driver_card_no = #{record.driverCardNo,jdbcType=VARCHAR}");
        sql.SET("driver_card_out = #{record.driverCardOut,jdbcType=VARCHAR}");
        sql.SET("enable_cash = #{record.enableCash,jdbcType=SMALLINT}");
        sql.SET("end_time = #{record.endTime,jdbcType=VARCHAR}");
        sql.SET("fee_type = #{record.feeType,jdbcType=SMALLINT}");
        sql.SET("mcard_member_id = #{record.mcardMemberId,jdbcType=INTEGER}");
        sql.SET("member_detail_id = #{record.memberDetailId,jdbcType=INTEGER}");
        sql.SET("merchant_discount = #{record.merchantDiscount,jdbcType=DOUBLE}");
        sql.SET("need_pay = #{record.needPay,jdbcType=DOUBLE}");
        sql.SET("open_gate_in = #{record.openGateIn,jdbcType=VARCHAR}");
        sql.SET("open_gate_out = #{record.openGateOut,jdbcType=VARCHAR}");
        sql.SET("park_id = #{record.parkId,jdbcType=INTEGER}");
        sql.SET("park_status = #{record.parkStatus,jdbcType=BIT}");
        sql.SET("parkin_type = #{record.parkinType,jdbcType=SMALLINT}");
        sql.SET("parking_in_img = #{record.parkingInImg,jdbcType=VARCHAR}");
        sql.SET("parking_out_img = #{record.parkingOutImg,jdbcType=VARCHAR}");
        sql.SET("parking_out_type = #{record.parkingOutType,jdbcType=SMALLINT}");
        sql.SET("port_id_in = #{record.portIdIn,jdbcType=VARCHAR}");
        sql.SET("port_id_out = #{record.portIdOut,jdbcType=VARCHAR}");
        sql.SET("start_time = #{record.startTime,jdbcType=VARCHAR}");
        sql.SET("trade_no = #{record.tradeNo,jdbcType=VARCHAR}");
        sql.SET("update_time = #{record.updateTime,jdbcType=VARCHAR}");
        sql.SET("user_id = #{record.userId,jdbcType=INTEGER}");
        sql.SET("user_name = #{record.userName,jdbcType=VARCHAR}");
        
        PwpParkTradeRecordsCriteria example = (PwpParkTradeRecordsCriteria) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_park_trade_records
     *
     * @mbg.generated
     */
    public String updateByPrimaryKeySelective(PwpParkTradeRecords record) {
        SQL sql = new SQL();
        sql.UPDATE("pwp_park_trade_records");
        
        if (record.getActualPay() != null) {
            sql.SET("actual_pay = #{actualPay,jdbcType=DOUBLE}");
        }
        
        if (record.getBalance() != null) {
            sql.SET("balance = #{balance,jdbcType=DOUBLE}");
        }
        
        if (record.getCarCardNo() != null) {
            sql.SET("car_card_no = #{carCardNo,jdbcType=VARCHAR}");
        }
        
        if (record.getCarNum() != null) {
            sql.SET("car_num = #{carNum,jdbcType=VARCHAR}");
        }
        
        if (record.getCarNumIn() != null) {
            sql.SET("car_num_in = #{carNumIn,jdbcType=VARCHAR}");
        }
        
        if (record.getCarNumOut() != null) {
            sql.SET("car_num_out = #{carNumOut,jdbcType=VARCHAR}");
        }
        
        if (record.getCarType() != null) {
            sql.SET("car_type = #{carType,jdbcType=SMALLINT}");
        }
        
        if (record.getClientId() != null) {
            sql.SET("client_id = #{clientId,jdbcType=INTEGER}");
        }
        
        if (record.getCouponCode() != null) {
            sql.SET("coupon_code = #{couponCode,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{createTime,jdbcType=VARCHAR}");
        }
        
        if (record.getDriverCardIn() != null) {
            sql.SET("driver_card_in = #{driverCardIn,jdbcType=VARCHAR}");
        }
        
        if (record.getDriverCardNo() != null) {
            sql.SET("driver_card_no = #{driverCardNo,jdbcType=VARCHAR}");
        }
        
        if (record.getDriverCardOut() != null) {
            sql.SET("driver_card_out = #{driverCardOut,jdbcType=VARCHAR}");
        }
        
        if (record.getEnableCash() != null) {
            sql.SET("enable_cash = #{enableCash,jdbcType=SMALLINT}");
        }
        
        if (record.getEndTime() != null) {
            sql.SET("end_time = #{endTime,jdbcType=VARCHAR}");
        }
        
        if (record.getFeeType() != null) {
            sql.SET("fee_type = #{feeType,jdbcType=SMALLINT}");
        }
        
        if (record.getMcardMemberId() != null) {
            sql.SET("mcard_member_id = #{mcardMemberId,jdbcType=INTEGER}");
        }
        
        if (record.getMemberDetailId() != null) {
            sql.SET("member_detail_id = #{memberDetailId,jdbcType=INTEGER}");
        }
        
        if (record.getMerchantDiscount() != null) {
            sql.SET("merchant_discount = #{merchantDiscount,jdbcType=DOUBLE}");
        }
        
        if (record.getNeedPay() != null) {
            sql.SET("need_pay = #{needPay,jdbcType=DOUBLE}");
        }
        
        if (record.getOpenGateIn() != null) {
            sql.SET("open_gate_in = #{openGateIn,jdbcType=VARCHAR}");
        }
        
        if (record.getOpenGateOut() != null) {
            sql.SET("open_gate_out = #{openGateOut,jdbcType=VARCHAR}");
        }
        
        if (record.getParkId() != null) {
            sql.SET("park_id = #{parkId,jdbcType=INTEGER}");
        }
        
        if (record.getParkStatus() != null) {
            sql.SET("park_status = #{parkStatus,jdbcType=BIT}");
        }
        
        if (record.getParkinType() != null) {
            sql.SET("parkin_type = #{parkinType,jdbcType=SMALLINT}");
        }
        
        if (record.getParkingInImg() != null) {
            sql.SET("parking_in_img = #{parkingInImg,jdbcType=VARCHAR}");
        }
        
        if (record.getParkingOutImg() != null) {
            sql.SET("parking_out_img = #{parkingOutImg,jdbcType=VARCHAR}");
        }
        
        if (record.getParkingOutType() != null) {
            sql.SET("parking_out_type = #{parkingOutType,jdbcType=SMALLINT}");
        }
        
        if (record.getPortIdIn() != null) {
            sql.SET("port_id_in = #{portIdIn,jdbcType=VARCHAR}");
        }
        
        if (record.getPortIdOut() != null) {
            sql.SET("port_id_out = #{portIdOut,jdbcType=VARCHAR}");
        }
        
        if (record.getStartTime() != null) {
            sql.SET("start_time = #{startTime,jdbcType=VARCHAR}");
        }
        
        if (record.getTradeNo() != null) {
            sql.SET("trade_no = #{tradeNo,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.SET("update_time = #{updateTime,jdbcType=VARCHAR}");
        }
        
        if (record.getUserId() != null) {
            sql.SET("user_id = #{userId,jdbcType=INTEGER}");
        }
        
        if (record.getUserName() != null) {
            sql.SET("user_name = #{userName,jdbcType=VARCHAR}");
        }
        
        sql.WHERE("id = #{id,jdbcType=INTEGER}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_park_trade_records
     *
     * @mbg.generated
     */
    protected void applyWhere(SQL sql, PwpParkTradeRecordsCriteria example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}