package com.api.dao.sqlProvider;

import com.api.entity.PwpPaymentRule;
import com.api.entity.PwpPaymentRuleCriteria;
import com.api.entity.PwpPaymentRuleCriteria.Criteria;
import com.api.entity.PwpPaymentRuleCriteria.Criterion;
import org.apache.ibatis.jdbc.SQL;

import java.util.List;
import java.util.Map;

public class PwpPaymentRuleSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_payment_rule
     *
     * @mbg.generated
     */
    public String countByExample(PwpPaymentRuleCriteria example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("pwp_payment_rule");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_payment_rule
     *
     * @mbg.generated
     */
    public String deleteByExample(PwpPaymentRuleCriteria example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("pwp_payment_rule");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_payment_rule
     *
     * @mbg.generated
     */
    public String insertSelective(PwpPaymentRule record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("pwp_payment_rule");
        
        if (record.getId() != null) {
            sql.VALUES("id", "#{id,jdbcType=INTEGER}");
        }
        
        if (record.getLeagueId() != null) {
            sql.VALUES("league_id", "#{leagueId,jdbcType=INTEGER}");
        }
        
        if (record.getName() != null) {
            sql.VALUES("name", "#{name,jdbcType=VARCHAR}");
        }
        
        if (record.getFreeTime() != null) {
            sql.VALUES("free_time", "#{freeTime,jdbcType=INTEGER}");
        }
        
        if (record.getToplimit() != null) {
            sql.VALUES("toplimit", "#{toplimit,jdbcType=INTEGER}");
        }
        
        if (record.getParkYear() != null) {
            sql.VALUES("park_year", "#{parkYear,jdbcType=VARCHAR}");
        }
        
        if (record.getParkMonth() != null) {
            sql.VALUES("park_month", "#{parkMonth,jdbcType=VARCHAR}");
        }
        
        if (record.getParkByway() != null) {
            sql.VALUES("park_byway", "#{parkByway,jdbcType=BIT}");
        }
        
        if (record.getParkWeek() != null) {
            sql.VALUES("park_week", "#{parkWeek,jdbcType=VARCHAR}");
        }
        
        if (record.getParkDate() != null) {
            sql.VALUES("park_date", "#{parkDate,jdbcType=VARCHAR}");
        }
        
        if (record.getParkTime() != null) {
            sql.VALUES("park_time", "#{parkTime,jdbcType=VARCHAR}");
        }
        
        if (record.getCarTypes() != null) {
            sql.VALUES("car_types", "#{carTypes,jdbcType=VARCHAR}");
        }
        
        if (record.getStartTime() != null) {
            sql.VALUES("start_time", "#{startTime,jdbcType=TIME}");
        }
        
        if (record.getEndTime() != null) {
            sql.VALUES("end_time", "#{endTime,jdbcType=TIME}");
        }
        
        if (record.getCreateTime() != null) {
            sql.VALUES("create_time", "#{createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getIsStatus() != null) {
            sql.VALUES("is_status", "#{isStatus,jdbcType=INTEGER}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_payment_rule
     *
     * @mbg.generated
     */
    public String selectByExample(PwpPaymentRuleCriteria example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("id");
        } else {
            sql.SELECT("id");
        }
        sql.SELECT("league_id");
        sql.SELECT("name");
        sql.SELECT("free_time");
        sql.SELECT("toplimit");
        sql.SELECT("park_year");
        sql.SELECT("park_month");
        sql.SELECT("park_byway");
        sql.SELECT("park_week");
        sql.SELECT("park_date");
        sql.SELECT("park_time");
        sql.SELECT("car_types");
        sql.SELECT("start_time");
        sql.SELECT("end_time");
        sql.SELECT("create_time");
        sql.SELECT("is_status");
        sql.FROM("pwp_payment_rule");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_payment_rule
     *
     * @mbg.generated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        PwpPaymentRule record = (PwpPaymentRule) parameter.get("record");
        PwpPaymentRuleCriteria example = (PwpPaymentRuleCriteria) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("pwp_payment_rule");
        
        if (record.getId() != null) {
            sql.SET("id = #{record.id,jdbcType=INTEGER}");
        }
        
        if (record.getLeagueId() != null) {
            sql.SET("league_id = #{record.leagueId,jdbcType=INTEGER}");
        }
        
        if (record.getName() != null) {
            sql.SET("name = #{record.name,jdbcType=VARCHAR}");
        }
        
        if (record.getFreeTime() != null) {
            sql.SET("free_time = #{record.freeTime,jdbcType=INTEGER}");
        }
        
        if (record.getToplimit() != null) {
            sql.SET("toplimit = #{record.toplimit,jdbcType=INTEGER}");
        }
        
        if (record.getParkYear() != null) {
            sql.SET("park_year = #{record.parkYear,jdbcType=VARCHAR}");
        }
        
        if (record.getParkMonth() != null) {
            sql.SET("park_month = #{record.parkMonth,jdbcType=VARCHAR}");
        }
        
        if (record.getParkByway() != null) {
            sql.SET("park_byway = #{record.parkByway,jdbcType=BIT}");
        }
        
        if (record.getParkWeek() != null) {
            sql.SET("park_week = #{record.parkWeek,jdbcType=VARCHAR}");
        }
        
        if (record.getParkDate() != null) {
            sql.SET("park_date = #{record.parkDate,jdbcType=VARCHAR}");
        }
        
        if (record.getParkTime() != null) {
            sql.SET("park_time = #{record.parkTime,jdbcType=VARCHAR}");
        }
        
        if (record.getCarTypes() != null) {
            sql.SET("car_types = #{record.carTypes,jdbcType=VARCHAR}");
        }
        
        if (record.getStartTime() != null) {
            sql.SET("start_time = #{record.startTime,jdbcType=TIME}");
        }
        
        if (record.getEndTime() != null) {
            sql.SET("end_time = #{record.endTime,jdbcType=TIME}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getIsStatus() != null) {
            sql.SET("is_status = #{record.isStatus,jdbcType=INTEGER}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_payment_rule
     *
     * @mbg.generated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("pwp_payment_rule");
        
        sql.SET("id = #{record.id,jdbcType=INTEGER}");
        sql.SET("league_id = #{record.leagueId,jdbcType=INTEGER}");
        sql.SET("name = #{record.name,jdbcType=VARCHAR}");
        sql.SET("free_time = #{record.freeTime,jdbcType=INTEGER}");
        sql.SET("toplimit = #{record.toplimit,jdbcType=INTEGER}");
        sql.SET("park_year = #{record.parkYear,jdbcType=VARCHAR}");
        sql.SET("park_month = #{record.parkMonth,jdbcType=VARCHAR}");
        sql.SET("park_byway = #{record.parkByway,jdbcType=BIT}");
        sql.SET("park_week = #{record.parkWeek,jdbcType=VARCHAR}");
        sql.SET("park_date = #{record.parkDate,jdbcType=VARCHAR}");
        sql.SET("park_time = #{record.parkTime,jdbcType=VARCHAR}");
        sql.SET("car_types = #{record.carTypes,jdbcType=VARCHAR}");
        sql.SET("start_time = #{record.startTime,jdbcType=TIME}");
        sql.SET("end_time = #{record.endTime,jdbcType=TIME}");
        sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
        sql.SET("is_status = #{record.isStatus,jdbcType=INTEGER}");
        
        PwpPaymentRuleCriteria example = (PwpPaymentRuleCriteria) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_payment_rule
     *
     * @mbg.generated
     */
    public String updateByPrimaryKeySelective(PwpPaymentRule record) {
        SQL sql = new SQL();
        sql.UPDATE("pwp_payment_rule");
        
        if (record.getLeagueId() != null) {
            sql.SET("league_id = #{leagueId,jdbcType=INTEGER}");
        }
        
        if (record.getName() != null) {
            sql.SET("name = #{name,jdbcType=VARCHAR}");
        }
        
        if (record.getFreeTime() != null) {
            sql.SET("free_time = #{freeTime,jdbcType=INTEGER}");
        }
        
        if (record.getToplimit() != null) {
            sql.SET("toplimit = #{toplimit,jdbcType=INTEGER}");
        }
        
        if (record.getParkYear() != null) {
            sql.SET("park_year = #{parkYear,jdbcType=VARCHAR}");
        }
        
        if (record.getParkMonth() != null) {
            sql.SET("park_month = #{parkMonth,jdbcType=VARCHAR}");
        }
        
        if (record.getParkByway() != null) {
            sql.SET("park_byway = #{parkByway,jdbcType=BIT}");
        }
        
        if (record.getParkWeek() != null) {
            sql.SET("park_week = #{parkWeek,jdbcType=VARCHAR}");
        }
        
        if (record.getParkDate() != null) {
            sql.SET("park_date = #{parkDate,jdbcType=VARCHAR}");
        }
        
        if (record.getParkTime() != null) {
            sql.SET("park_time = #{parkTime,jdbcType=VARCHAR}");
        }
        
        if (record.getCarTypes() != null) {
            sql.SET("car_types = #{carTypes,jdbcType=VARCHAR}");
        }
        
        if (record.getStartTime() != null) {
            sql.SET("start_time = #{startTime,jdbcType=TIME}");
        }
        
        if (record.getEndTime() != null) {
            sql.SET("end_time = #{endTime,jdbcType=TIME}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getIsStatus() != null) {
            sql.SET("is_status = #{isStatus,jdbcType=INTEGER}");
        }
        
        sql.WHERE("id = #{id,jdbcType=INTEGER}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_payment_rule
     *
     * @mbg.generated
     */
    protected void applyWhere(SQL sql, PwpPaymentRuleCriteria example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}