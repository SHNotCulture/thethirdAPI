package com.api.dao.sqlProvider;

import com.api.entity.TCompanyPark;
import com.api.entity.TCompanyParkCriteria;
import com.api.entity.TCompanyParkCriteria.Criteria;
import com.api.entity.TCompanyParkCriteria.Criterion;
import org.apache.ibatis.jdbc.SQL;

import java.util.List;
import java.util.Map;

public class TCompanyParkSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_company_park
     *
     * @mbg.generated
     */
    public String countByExample(TCompanyParkCriteria example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("t_company_park");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_company_park
     *
     * @mbg.generated
     */
    public String deleteByExample(TCompanyParkCriteria example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("t_company_park");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_company_park
     *
     * @mbg.generated
     */
    public String insertSelective(TCompanyPark record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("t_company_park");
        
        if (record.getId() != null) {
            sql.VALUES("id", "#{id,jdbcType=INTEGER}");
        }
        
        if (record.getAddress() != null) {
            sql.VALUES("address", "#{address,jdbcType=VARCHAR}");
        }
        
        if (record.getBankAccount() != null) {
            sql.VALUES("bank_account", "#{bankAccount,jdbcType=VARCHAR}");
        }
        
        if (record.getBankCard() != null) {
            sql.VALUES("bank_card", "#{bankCard,jdbcType=VARCHAR}");
        }
        
        if (record.getBankName() != null) {
            sql.VALUES("bank_name", "#{bankName,jdbcType=VARCHAR}");
        }
        
        if (record.getCompanyId() != null) {
            sql.VALUES("company_id", "#{companyId,jdbcType=INTEGER}");
        }
        
        if (record.getMonthRule() != null) {
            sql.VALUES("month_rule", "#{monthRule,jdbcType=INTEGER}");
        }
        
        if (record.getParkName() != null) {
            sql.VALUES("park_name", "#{parkName,jdbcType=VARCHAR}");
        }
        
        if (record.getPositionX() != null) {
            sql.VALUES("position_x", "#{positionX,jdbcType=VARCHAR}");
        }
        
        if (record.getPositionY() != null) {
            sql.VALUES("position_y", "#{positionY,jdbcType=VARCHAR}");
        }
        
        if (record.getRate() != null) {
            sql.VALUES("rate", "#{rate,jdbcType=DOUBLE}");
        }
        
        if (record.getRemark() != null) {
            sql.VALUES("remark", "#{remark,jdbcType=VARCHAR}");
        }
        
        if (record.getTotalParkingSpace() != null) {
            sql.VALUES("total_parking_space", "#{totalParkingSpace,jdbcType=INTEGER}");
        }
        
        if (record.getInFixprivateCars() != null) {
            sql.VALUES("in_fixprivate_cars", "#{inFixprivateCars,jdbcType=INTEGER}");
        }
        
        if (record.getInFixlotsCars() != null) {
            sql.VALUES("in_fixlots_cars", "#{inFixlotsCars,jdbcType=INTEGER}");
        }
        
        if (record.getInTempcars() != null) {
            sql.VALUES("in_tempcars", "#{inTempcars,jdbcType=INTEGER}");
        }
        
        if (record.getPrivateTotalSpace() != null) {
            sql.VALUES("private_total_space", "#{privateTotalSpace,jdbcType=INTEGER}");
        }
        
        if (record.getApiKey() != null) {
            sql.VALUES("api_key", "#{apiKey,jdbcType=VARCHAR}");
        }
        
        if (record.getPrivateVacancySpace() != null) {
            sql.VALUES("private_vacancy_space", "#{privateVacancySpace,jdbcType=INTEGER}");
        }
        
        if (record.getInFixcars() != null) {
            sql.VALUES("in_fixcars", "#{inFixcars,jdbcType=INTEGER}");
        }
        
        if (record.getAppId() != null) {
            sql.VALUES("app_id", "#{appId,jdbcType=VARCHAR}");
        }
        
        if (record.getAppSecret() != null) {
            sql.VALUES("app_secret", "#{appSecret,jdbcType=VARCHAR}");
        }
        
        if (record.getMchId() != null) {
            sql.VALUES("mch_id", "#{mchId,jdbcType=VARCHAR}");
        }
        
        if (record.getMchKey() != null) {
            sql.VALUES("mch_key", "#{mchKey,jdbcType=VARCHAR}");
        }
        
        if (record.getAutoRenew() != null) {
            sql.VALUES("auto_renew", "#{autoRenew,jdbcType=INTEGER}");
        }
        
        if (record.getMonthCar() != null) {
            sql.VALUES("month_car", "#{monthCar,jdbcType=INTEGER}");
        }
        
        if (record.getIsManyPreferential() != null) {
            sql.VALUES("is_many_preferential", "#{isManyPreferential,jdbcType=INTEGER}");
        }
        
        if (record.getDefaultProvince() != null) {
            sql.VALUES("default_province", "#{defaultProvince,jdbcType=VARCHAR}");
        }
        
        if (record.getIncarCountToday() != null) {
            sql.VALUES("incar_count_today", "#{incarCountToday,jdbcType=INTEGER}");
        }
        
        if (record.getOutcarCountToday() != null) {
            sql.VALUES("outcar_count_today", "#{outcarCountToday,jdbcType=INTEGER}");
        }
        
        if (record.getNoconfirmcarCountToday() != null) {
            sql.VALUES("noconfirmcar_count_today", "#{noconfirmcarCountToday,jdbcType=INTEGER}");
        }
        
        if (record.getLocalcouponcarCountToday() != null) {
            sql.VALUES("localcouponcar_count_today", "#{localcouponcarCountToday,jdbcType=INTEGER}");
        }
        
        if (record.getNoInrecordCountToday() != null) {
            sql.VALUES("no_inrecord_count_today", "#{noInrecordCountToday,jdbcType=INTEGER}");
        }
        
        if (record.getCashpayTotalToday() != null) {
            sql.VALUES("cashpay_total_today", "#{cashpayTotalToday,jdbcType=DOUBLE}");
        }
        
        if (record.getQpasspayTotalToday() != null) {
            sql.VALUES("qpasspay_total_today", "#{qpasspayTotalToday,jdbcType=DOUBLE}");
        }
        
        if (record.getPrepayTotalToday() != null) {
            sql.VALUES("prepay_total_today", "#{prepayTotalToday,jdbcType=DOUBLE}");
        }
        
        if (record.getLocalcouponpayTotalToday() != null) {
            sql.VALUES("localcouponpay_total_today", "#{localcouponpayTotalToday,jdbcType=DOUBLE}");
        }
        
        if (record.getBehalfpayTotalToday() != null) {
            sql.VALUES("behalfpay_total_today", "#{behalfpayTotalToday,jdbcType=DOUBLE}");
        }
        
        if (record.getNeedpayTotalToday() != null) {
            sql.VALUES("needpay_total_today", "#{needpayTotalToday,jdbcType=DOUBLE}");
        }
        
        if (record.getMonthlyCashpayToday() != null) {
            sql.VALUES("monthly_cashpay_today", "#{monthlyCashpayToday,jdbcType=DOUBLE}");
        }
        
        if (record.getMonthlyQpasspayToday() != null) {
            sql.VALUES("monthly_qpasspay_today", "#{monthlyQpasspayToday,jdbcType=DOUBLE}");
        }
        
        if (record.getCashpayCount() != null) {
            sql.VALUES("cashpay_count", "#{cashpayCount,jdbcType=INTEGER}");
        }
        
        if (record.getQpasspayCount() != null) {
            sql.VALUES("qpasspay_count", "#{qpasspayCount,jdbcType=INTEGER}");
        }
        
        if (record.getPrepayCount() != null) {
            sql.VALUES("prepay_count", "#{prepayCount,jdbcType=INTEGER}");
        }
        
        if (record.getLocalcouponpayCount() != null) {
            sql.VALUES("localcouponpay_count", "#{localcouponpayCount,jdbcType=INTEGER}");
        }
        
        if (record.getBehalfpayCount() != null) {
            sql.VALUES("behalfpay_count", "#{behalfpayCount,jdbcType=INTEGER}");
        }
        
        if (record.getWechatpayCount() != null) {
            sql.VALUES("wechatpay_count", "#{wechatpayCount,jdbcType=INTEGER}");
        }
        
        if (record.getAlipayCount() != null) {
            sql.VALUES("alipay_count", "#{alipayCount,jdbcType=INTEGER}");
        }
        
        if (record.getEtcpayCount() != null) {
            sql.VALUES("etcpay_count", "#{etcpayCount,jdbcType=INTEGER}");
        }
        
        if (record.getUnionpayCount() != null) {
            sql.VALUES("unionpay_count", "#{unionpayCount,jdbcType=INTEGER}");
        }
        
        if (record.getNoentryCount() != null) {
            sql.VALUES("noentry_count", "#{noentryCount,jdbcType=INTEGER}");
        }
        
        if (record.getNoconfirmCount() != null) {
            sql.VALUES("noconfirm_count", "#{noconfirmCount,jdbcType=INTEGER}");
        }
        
        if (record.getUpdateCarplateCount() != null) {
            sql.VALUES("update_carplate_count", "#{updateCarplateCount,jdbcType=INTEGER}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_company_park
     *
     * @mbg.generated
     */
    public String selectByExample(TCompanyParkCriteria example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("id");
        } else {
            sql.SELECT("id");
        }
        sql.SELECT("address");
        sql.SELECT("bank_account");
        sql.SELECT("bank_card");
        sql.SELECT("bank_name");
        sql.SELECT("company_id");
        sql.SELECT("month_rule");
        sql.SELECT("park_name");
        sql.SELECT("position_x");
        sql.SELECT("position_y");
        sql.SELECT("rate");
        sql.SELECT("remark");
        sql.SELECT("total_parking_space");
        sql.SELECT("in_fixprivate_cars");
        sql.SELECT("in_fixlots_cars");
        sql.SELECT("in_tempcars");
        sql.SELECT("private_total_space");
        sql.SELECT("api_key");
        sql.SELECT("private_vacancy_space");
        sql.SELECT("in_fixcars");
        sql.SELECT("app_id");
        sql.SELECT("app_secret");
        sql.SELECT("mch_id");
        sql.SELECT("mch_key");
        sql.SELECT("auto_renew");
        sql.SELECT("month_car");
        sql.SELECT("is_many_preferential");
        sql.SELECT("default_province");
        sql.SELECT("incar_count_today");
        sql.SELECT("outcar_count_today");
        sql.SELECT("noconfirmcar_count_today");
        sql.SELECT("localcouponcar_count_today");
        sql.SELECT("no_inrecord_count_today");
        sql.SELECT("cashpay_total_today");
        sql.SELECT("qpasspay_total_today");
        sql.SELECT("prepay_total_today");
        sql.SELECT("localcouponpay_total_today");
        sql.SELECT("behalfpay_total_today");
        sql.SELECT("needpay_total_today");
        sql.SELECT("monthly_cashpay_today");
        sql.SELECT("monthly_qpasspay_today");
        sql.SELECT("cashpay_count");
        sql.SELECT("qpasspay_count");
        sql.SELECT("prepay_count");
        sql.SELECT("localcouponpay_count");
        sql.SELECT("behalfpay_count");
        sql.SELECT("wechatpay_count");
        sql.SELECT("alipay_count");
        sql.SELECT("etcpay_count");
        sql.SELECT("unionpay_count");
        sql.SELECT("noentry_count");
        sql.SELECT("noconfirm_count");
        sql.SELECT("update_carplate_count");
        sql.FROM("t_company_park");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_company_park
     *
     * @mbg.generated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        TCompanyPark record = (TCompanyPark) parameter.get("record");
        TCompanyParkCriteria example = (TCompanyParkCriteria) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("t_company_park");
        
        if (record.getId() != null) {
            sql.SET("id = #{record.id,jdbcType=INTEGER}");
        }
        
        if (record.getAddress() != null) {
            sql.SET("address = #{record.address,jdbcType=VARCHAR}");
        }
        
        if (record.getBankAccount() != null) {
            sql.SET("bank_account = #{record.bankAccount,jdbcType=VARCHAR}");
        }
        
        if (record.getBankCard() != null) {
            sql.SET("bank_card = #{record.bankCard,jdbcType=VARCHAR}");
        }
        
        if (record.getBankName() != null) {
            sql.SET("bank_name = #{record.bankName,jdbcType=VARCHAR}");
        }
        
        if (record.getCompanyId() != null) {
            sql.SET("company_id = #{record.companyId,jdbcType=INTEGER}");
        }
        
        if (record.getMonthRule() != null) {
            sql.SET("month_rule = #{record.monthRule,jdbcType=INTEGER}");
        }
        
        if (record.getParkName() != null) {
            sql.SET("park_name = #{record.parkName,jdbcType=VARCHAR}");
        }
        
        if (record.getPositionX() != null) {
            sql.SET("position_x = #{record.positionX,jdbcType=VARCHAR}");
        }
        
        if (record.getPositionY() != null) {
            sql.SET("position_y = #{record.positionY,jdbcType=VARCHAR}");
        }
        
        if (record.getRate() != null) {
            sql.SET("rate = #{record.rate,jdbcType=DOUBLE}");
        }
        
        if (record.getRemark() != null) {
            sql.SET("remark = #{record.remark,jdbcType=VARCHAR}");
        }
        
        if (record.getTotalParkingSpace() != null) {
            sql.SET("total_parking_space = #{record.totalParkingSpace,jdbcType=INTEGER}");
        }
        
        if (record.getInFixprivateCars() != null) {
            sql.SET("in_fixprivate_cars = #{record.inFixprivateCars,jdbcType=INTEGER}");
        }
        
        if (record.getInFixlotsCars() != null) {
            sql.SET("in_fixlots_cars = #{record.inFixlotsCars,jdbcType=INTEGER}");
        }
        
        if (record.getInTempcars() != null) {
            sql.SET("in_tempcars = #{record.inTempcars,jdbcType=INTEGER}");
        }
        
        if (record.getPrivateTotalSpace() != null) {
            sql.SET("private_total_space = #{record.privateTotalSpace,jdbcType=INTEGER}");
        }
        
        if (record.getApiKey() != null) {
            sql.SET("api_key = #{record.apiKey,jdbcType=VARCHAR}");
        }
        
        if (record.getPrivateVacancySpace() != null) {
            sql.SET("private_vacancy_space = #{record.privateVacancySpace,jdbcType=INTEGER}");
        }
        
        if (record.getInFixcars() != null) {
            sql.SET("in_fixcars = #{record.inFixcars,jdbcType=INTEGER}");
        }
        
        if (record.getAppId() != null) {
            sql.SET("app_id = #{record.appId,jdbcType=VARCHAR}");
        }
        
        if (record.getAppSecret() != null) {
            sql.SET("app_secret = #{record.appSecret,jdbcType=VARCHAR}");
        }
        
        if (record.getMchId() != null) {
            sql.SET("mch_id = #{record.mchId,jdbcType=VARCHAR}");
        }
        
        if (record.getMchKey() != null) {
            sql.SET("mch_key = #{record.mchKey,jdbcType=VARCHAR}");
        }
        
        if (record.getAutoRenew() != null) {
            sql.SET("auto_renew = #{record.autoRenew,jdbcType=INTEGER}");
        }
        
        if (record.getMonthCar() != null) {
            sql.SET("month_car = #{record.monthCar,jdbcType=INTEGER}");
        }
        
        if (record.getIsManyPreferential() != null) {
            sql.SET("is_many_preferential = #{record.isManyPreferential,jdbcType=INTEGER}");
        }
        
        if (record.getDefaultProvince() != null) {
            sql.SET("default_province = #{record.defaultProvince,jdbcType=VARCHAR}");
        }
        
        if (record.getIncarCountToday() != null) {
            sql.SET("incar_count_today = #{record.incarCountToday,jdbcType=INTEGER}");
        }
        
        if (record.getOutcarCountToday() != null) {
            sql.SET("outcar_count_today = #{record.outcarCountToday,jdbcType=INTEGER}");
        }
        
        if (record.getNoconfirmcarCountToday() != null) {
            sql.SET("noconfirmcar_count_today = #{record.noconfirmcarCountToday,jdbcType=INTEGER}");
        }
        
        if (record.getLocalcouponcarCountToday() != null) {
            sql.SET("localcouponcar_count_today = #{record.localcouponcarCountToday,jdbcType=INTEGER}");
        }
        
        if (record.getNoInrecordCountToday() != null) {
            sql.SET("no_inrecord_count_today = #{record.noInrecordCountToday,jdbcType=INTEGER}");
        }
        
        if (record.getCashpayTotalToday() != null) {
            sql.SET("cashpay_total_today = #{record.cashpayTotalToday,jdbcType=DOUBLE}");
        }
        
        if (record.getQpasspayTotalToday() != null) {
            sql.SET("qpasspay_total_today = #{record.qpasspayTotalToday,jdbcType=DOUBLE}");
        }
        
        if (record.getPrepayTotalToday() != null) {
            sql.SET("prepay_total_today = #{record.prepayTotalToday,jdbcType=DOUBLE}");
        }
        
        if (record.getLocalcouponpayTotalToday() != null) {
            sql.SET("localcouponpay_total_today = #{record.localcouponpayTotalToday,jdbcType=DOUBLE}");
        }
        
        if (record.getBehalfpayTotalToday() != null) {
            sql.SET("behalfpay_total_today = #{record.behalfpayTotalToday,jdbcType=DOUBLE}");
        }
        
        if (record.getNeedpayTotalToday() != null) {
            sql.SET("needpay_total_today = #{record.needpayTotalToday,jdbcType=DOUBLE}");
        }
        
        if (record.getMonthlyCashpayToday() != null) {
            sql.SET("monthly_cashpay_today = #{record.monthlyCashpayToday,jdbcType=DOUBLE}");
        }
        
        if (record.getMonthlyQpasspayToday() != null) {
            sql.SET("monthly_qpasspay_today = #{record.monthlyQpasspayToday,jdbcType=DOUBLE}");
        }
        
        if (record.getCashpayCount() != null) {
            sql.SET("cashpay_count = #{record.cashpayCount,jdbcType=INTEGER}");
        }
        
        if (record.getQpasspayCount() != null) {
            sql.SET("qpasspay_count = #{record.qpasspayCount,jdbcType=INTEGER}");
        }
        
        if (record.getPrepayCount() != null) {
            sql.SET("prepay_count = #{record.prepayCount,jdbcType=INTEGER}");
        }
        
        if (record.getLocalcouponpayCount() != null) {
            sql.SET("localcouponpay_count = #{record.localcouponpayCount,jdbcType=INTEGER}");
        }
        
        if (record.getBehalfpayCount() != null) {
            sql.SET("behalfpay_count = #{record.behalfpayCount,jdbcType=INTEGER}");
        }
        
        if (record.getWechatpayCount() != null) {
            sql.SET("wechatpay_count = #{record.wechatpayCount,jdbcType=INTEGER}");
        }
        
        if (record.getAlipayCount() != null) {
            sql.SET("alipay_count = #{record.alipayCount,jdbcType=INTEGER}");
        }
        
        if (record.getEtcpayCount() != null) {
            sql.SET("etcpay_count = #{record.etcpayCount,jdbcType=INTEGER}");
        }
        
        if (record.getUnionpayCount() != null) {
            sql.SET("unionpay_count = #{record.unionpayCount,jdbcType=INTEGER}");
        }
        
        if (record.getNoentryCount() != null) {
            sql.SET("noentry_count = #{record.noentryCount,jdbcType=INTEGER}");
        }
        
        if (record.getNoconfirmCount() != null) {
            sql.SET("noconfirm_count = #{record.noconfirmCount,jdbcType=INTEGER}");
        }
        
        if (record.getUpdateCarplateCount() != null) {
            sql.SET("update_carplate_count = #{record.updateCarplateCount,jdbcType=INTEGER}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_company_park
     *
     * @mbg.generated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("t_company_park");
        
        sql.SET("id = #{record.id,jdbcType=INTEGER}");
        sql.SET("address = #{record.address,jdbcType=VARCHAR}");
        sql.SET("bank_account = #{record.bankAccount,jdbcType=VARCHAR}");
        sql.SET("bank_card = #{record.bankCard,jdbcType=VARCHAR}");
        sql.SET("bank_name = #{record.bankName,jdbcType=VARCHAR}");
        sql.SET("company_id = #{record.companyId,jdbcType=INTEGER}");
        sql.SET("month_rule = #{record.monthRule,jdbcType=INTEGER}");
        sql.SET("park_name = #{record.parkName,jdbcType=VARCHAR}");
        sql.SET("position_x = #{record.positionX,jdbcType=VARCHAR}");
        sql.SET("position_y = #{record.positionY,jdbcType=VARCHAR}");
        sql.SET("rate = #{record.rate,jdbcType=DOUBLE}");
        sql.SET("remark = #{record.remark,jdbcType=VARCHAR}");
        sql.SET("total_parking_space = #{record.totalParkingSpace,jdbcType=INTEGER}");
        sql.SET("in_fixprivate_cars = #{record.inFixprivateCars,jdbcType=INTEGER}");
        sql.SET("in_fixlots_cars = #{record.inFixlotsCars,jdbcType=INTEGER}");
        sql.SET("in_tempcars = #{record.inTempcars,jdbcType=INTEGER}");
        sql.SET("private_total_space = #{record.privateTotalSpace,jdbcType=INTEGER}");
        sql.SET("api_key = #{record.apiKey,jdbcType=VARCHAR}");
        sql.SET("private_vacancy_space = #{record.privateVacancySpace,jdbcType=INTEGER}");
        sql.SET("in_fixcars = #{record.inFixcars,jdbcType=INTEGER}");
        sql.SET("app_id = #{record.appId,jdbcType=VARCHAR}");
        sql.SET("app_secret = #{record.appSecret,jdbcType=VARCHAR}");
        sql.SET("mch_id = #{record.mchId,jdbcType=VARCHAR}");
        sql.SET("mch_key = #{record.mchKey,jdbcType=VARCHAR}");
        sql.SET("auto_renew = #{record.autoRenew,jdbcType=INTEGER}");
        sql.SET("month_car = #{record.monthCar,jdbcType=INTEGER}");
        sql.SET("is_many_preferential = #{record.isManyPreferential,jdbcType=INTEGER}");
        sql.SET("default_province = #{record.defaultProvince,jdbcType=VARCHAR}");
        sql.SET("incar_count_today = #{record.incarCountToday,jdbcType=INTEGER}");
        sql.SET("outcar_count_today = #{record.outcarCountToday,jdbcType=INTEGER}");
        sql.SET("noconfirmcar_count_today = #{record.noconfirmcarCountToday,jdbcType=INTEGER}");
        sql.SET("localcouponcar_count_today = #{record.localcouponcarCountToday,jdbcType=INTEGER}");
        sql.SET("no_inrecord_count_today = #{record.noInrecordCountToday,jdbcType=INTEGER}");
        sql.SET("cashpay_total_today = #{record.cashpayTotalToday,jdbcType=DOUBLE}");
        sql.SET("qpasspay_total_today = #{record.qpasspayTotalToday,jdbcType=DOUBLE}");
        sql.SET("prepay_total_today = #{record.prepayTotalToday,jdbcType=DOUBLE}");
        sql.SET("localcouponpay_total_today = #{record.localcouponpayTotalToday,jdbcType=DOUBLE}");
        sql.SET("behalfpay_total_today = #{record.behalfpayTotalToday,jdbcType=DOUBLE}");
        sql.SET("needpay_total_today = #{record.needpayTotalToday,jdbcType=DOUBLE}");
        sql.SET("monthly_cashpay_today = #{record.monthlyCashpayToday,jdbcType=DOUBLE}");
        sql.SET("monthly_qpasspay_today = #{record.monthlyQpasspayToday,jdbcType=DOUBLE}");
        sql.SET("cashpay_count = #{record.cashpayCount,jdbcType=INTEGER}");
        sql.SET("qpasspay_count = #{record.qpasspayCount,jdbcType=INTEGER}");
        sql.SET("prepay_count = #{record.prepayCount,jdbcType=INTEGER}");
        sql.SET("localcouponpay_count = #{record.localcouponpayCount,jdbcType=INTEGER}");
        sql.SET("behalfpay_count = #{record.behalfpayCount,jdbcType=INTEGER}");
        sql.SET("wechatpay_count = #{record.wechatpayCount,jdbcType=INTEGER}");
        sql.SET("alipay_count = #{record.alipayCount,jdbcType=INTEGER}");
        sql.SET("etcpay_count = #{record.etcpayCount,jdbcType=INTEGER}");
        sql.SET("unionpay_count = #{record.unionpayCount,jdbcType=INTEGER}");
        sql.SET("noentry_count = #{record.noentryCount,jdbcType=INTEGER}");
        sql.SET("noconfirm_count = #{record.noconfirmCount,jdbcType=INTEGER}");
        sql.SET("update_carplate_count = #{record.updateCarplateCount,jdbcType=INTEGER}");
        
        TCompanyParkCriteria example = (TCompanyParkCriteria) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_company_park
     *
     * @mbg.generated
     */
    public String updateByPrimaryKeySelective(TCompanyPark record) {
        SQL sql = new SQL();
        sql.UPDATE("t_company_park");
        
        if (record.getAddress() != null) {
            sql.SET("address = #{address,jdbcType=VARCHAR}");
        }
        
        if (record.getBankAccount() != null) {
            sql.SET("bank_account = #{bankAccount,jdbcType=VARCHAR}");
        }
        
        if (record.getBankCard() != null) {
            sql.SET("bank_card = #{bankCard,jdbcType=VARCHAR}");
        }
        
        if (record.getBankName() != null) {
            sql.SET("bank_name = #{bankName,jdbcType=VARCHAR}");
        }
        
        if (record.getCompanyId() != null) {
            sql.SET("company_id = #{companyId,jdbcType=INTEGER}");
        }
        
        if (record.getMonthRule() != null) {
            sql.SET("month_rule = #{monthRule,jdbcType=INTEGER}");
        }
        
        if (record.getParkName() != null) {
            sql.SET("park_name = #{parkName,jdbcType=VARCHAR}");
        }
        
        if (record.getPositionX() != null) {
            sql.SET("position_x = #{positionX,jdbcType=VARCHAR}");
        }
        
        if (record.getPositionY() != null) {
            sql.SET("position_y = #{positionY,jdbcType=VARCHAR}");
        }
        
        if (record.getRate() != null) {
            sql.SET("rate = #{rate,jdbcType=DOUBLE}");
        }
        
        if (record.getRemark() != null) {
            sql.SET("remark = #{remark,jdbcType=VARCHAR}");
        }
        
        if (record.getTotalParkingSpace() != null) {
            sql.SET("total_parking_space = #{totalParkingSpace,jdbcType=INTEGER}");
        }
        
        if (record.getInFixprivateCars() != null) {
            sql.SET("in_fixprivate_cars = #{inFixprivateCars,jdbcType=INTEGER}");
        }
        
        if (record.getInFixlotsCars() != null) {
            sql.SET("in_fixlots_cars = #{inFixlotsCars,jdbcType=INTEGER}");
        }
        
        if (record.getInTempcars() != null) {
            sql.SET("in_tempcars = #{inTempcars,jdbcType=INTEGER}");
        }
        
        if (record.getPrivateTotalSpace() != null) {
            sql.SET("private_total_space = #{privateTotalSpace,jdbcType=INTEGER}");
        }
        
        if (record.getApiKey() != null) {
            sql.SET("api_key = #{apiKey,jdbcType=VARCHAR}");
        }
        
        if (record.getPrivateVacancySpace() != null) {
            sql.SET("private_vacancy_space = #{privateVacancySpace,jdbcType=INTEGER}");
        }
        
        if (record.getInFixcars() != null) {
            sql.SET("in_fixcars = #{inFixcars,jdbcType=INTEGER}");
        }
        
        if (record.getAppId() != null) {
            sql.SET("app_id = #{appId,jdbcType=VARCHAR}");
        }
        
        if (record.getAppSecret() != null) {
            sql.SET("app_secret = #{appSecret,jdbcType=VARCHAR}");
        }
        
        if (record.getMchId() != null) {
            sql.SET("mch_id = #{mchId,jdbcType=VARCHAR}");
        }
        
        if (record.getMchKey() != null) {
            sql.SET("mch_key = #{mchKey,jdbcType=VARCHAR}");
        }
        
        if (record.getAutoRenew() != null) {
            sql.SET("auto_renew = #{autoRenew,jdbcType=INTEGER}");
        }
        
        if (record.getMonthCar() != null) {
            sql.SET("month_car = #{monthCar,jdbcType=INTEGER}");
        }
        
        if (record.getIsManyPreferential() != null) {
            sql.SET("is_many_preferential = #{isManyPreferential,jdbcType=INTEGER}");
        }
        
        if (record.getDefaultProvince() != null) {
            sql.SET("default_province = #{defaultProvince,jdbcType=VARCHAR}");
        }
        
        if (record.getIncarCountToday() != null) {
            sql.SET("incar_count_today = #{incarCountToday,jdbcType=INTEGER}");
        }
        
        if (record.getOutcarCountToday() != null) {
            sql.SET("outcar_count_today = #{outcarCountToday,jdbcType=INTEGER}");
        }
        
        if (record.getNoconfirmcarCountToday() != null) {
            sql.SET("noconfirmcar_count_today = #{noconfirmcarCountToday,jdbcType=INTEGER}");
        }
        
        if (record.getLocalcouponcarCountToday() != null) {
            sql.SET("localcouponcar_count_today = #{localcouponcarCountToday,jdbcType=INTEGER}");
        }
        
        if (record.getNoInrecordCountToday() != null) {
            sql.SET("no_inrecord_count_today = #{noInrecordCountToday,jdbcType=INTEGER}");
        }
        
        if (record.getCashpayTotalToday() != null) {
            sql.SET("cashpay_total_today = #{cashpayTotalToday,jdbcType=DOUBLE}");
        }
        
        if (record.getQpasspayTotalToday() != null) {
            sql.SET("qpasspay_total_today = #{qpasspayTotalToday,jdbcType=DOUBLE}");
        }
        
        if (record.getPrepayTotalToday() != null) {
            sql.SET("prepay_total_today = #{prepayTotalToday,jdbcType=DOUBLE}");
        }
        
        if (record.getLocalcouponpayTotalToday() != null) {
            sql.SET("localcouponpay_total_today = #{localcouponpayTotalToday,jdbcType=DOUBLE}");
        }
        
        if (record.getBehalfpayTotalToday() != null) {
            sql.SET("behalfpay_total_today = #{behalfpayTotalToday,jdbcType=DOUBLE}");
        }
        
        if (record.getNeedpayTotalToday() != null) {
            sql.SET("needpay_total_today = #{needpayTotalToday,jdbcType=DOUBLE}");
        }
        
        if (record.getMonthlyCashpayToday() != null) {
            sql.SET("monthly_cashpay_today = #{monthlyCashpayToday,jdbcType=DOUBLE}");
        }
        
        if (record.getMonthlyQpasspayToday() != null) {
            sql.SET("monthly_qpasspay_today = #{monthlyQpasspayToday,jdbcType=DOUBLE}");
        }
        
        if (record.getCashpayCount() != null) {
            sql.SET("cashpay_count = #{cashpayCount,jdbcType=INTEGER}");
        }
        
        if (record.getQpasspayCount() != null) {
            sql.SET("qpasspay_count = #{qpasspayCount,jdbcType=INTEGER}");
        }
        
        if (record.getPrepayCount() != null) {
            sql.SET("prepay_count = #{prepayCount,jdbcType=INTEGER}");
        }
        
        if (record.getLocalcouponpayCount() != null) {
            sql.SET("localcouponpay_count = #{localcouponpayCount,jdbcType=INTEGER}");
        }
        
        if (record.getBehalfpayCount() != null) {
            sql.SET("behalfpay_count = #{behalfpayCount,jdbcType=INTEGER}");
        }
        
        if (record.getWechatpayCount() != null) {
            sql.SET("wechatpay_count = #{wechatpayCount,jdbcType=INTEGER}");
        }
        
        if (record.getAlipayCount() != null) {
            sql.SET("alipay_count = #{alipayCount,jdbcType=INTEGER}");
        }
        
        if (record.getEtcpayCount() != null) {
            sql.SET("etcpay_count = #{etcpayCount,jdbcType=INTEGER}");
        }
        
        if (record.getUnionpayCount() != null) {
            sql.SET("unionpay_count = #{unionpayCount,jdbcType=INTEGER}");
        }
        
        if (record.getNoentryCount() != null) {
            sql.SET("noentry_count = #{noentryCount,jdbcType=INTEGER}");
        }
        
        if (record.getNoconfirmCount() != null) {
            sql.SET("noconfirm_count = #{noconfirmCount,jdbcType=INTEGER}");
        }
        
        if (record.getUpdateCarplateCount() != null) {
            sql.SET("update_carplate_count = #{updateCarplateCount,jdbcType=INTEGER}");
        }
        
        sql.WHERE("id = #{id,jdbcType=INTEGER}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_company_park
     *
     * @mbg.generated
     */
    protected void applyWhere(SQL sql, TCompanyParkCriteria example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}