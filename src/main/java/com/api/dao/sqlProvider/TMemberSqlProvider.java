package com.api.dao.sqlProvider;

import com.api.entity.TMember;
import com.api.entity.TMemberCriteria;
import com.api.entity.TMemberCriteria.Criteria;
import com.api.entity.TMemberCriteria.Criterion;
import org.apache.ibatis.jdbc.SQL;

import java.util.List;
import java.util.Map;

public class TMemberSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_member
     *
     * @mbg.generated
     */
    public String countByExample(TMemberCriteria example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("t_member");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_member
     *
     * @mbg.generated
     */
    public String deleteByExample(TMemberCriteria example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("t_member");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_member
     *
     * @mbg.generated
     */
    public String insertSelective(TMember record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("t_member");
        
        if (record.getId() != null) {
            sql.VALUES("id", "#{id,jdbcType=INTEGER}");
        }
        
        if (record.getAccount() != null) {
            sql.VALUES("account", "#{account,jdbcType=VARCHAR}");
        }
        
        if (record.getBalance() != null) {
            sql.VALUES("balance", "#{balance,jdbcType=DOUBLE}");
        }
        
        if (record.getCarColor() != null) {
            sql.VALUES("car_color", "#{carColor,jdbcType=VARCHAR}");
        }
        
        if (record.getCarEngineNum() != null) {
            sql.VALUES("car_engine_num", "#{carEngineNum,jdbcType=VARCHAR}");
        }
        
        if (record.getCarIdentiNum() != null) {
            sql.VALUES("car_identi_num", "#{carIdentiNum,jdbcType=VARCHAR}");
        }
        
        if (record.getCarPlate() != null) {
            sql.VALUES("car_plate", "#{carPlate,jdbcType=VARCHAR}");
        }
        
        if (record.getCardCode() != null) {
            sql.VALUES("card_code", "#{cardCode,jdbcType=VARCHAR}");
        }
        
        if (record.getCardCvv() != null) {
            sql.VALUES("card_cvv", "#{cardCvv,jdbcType=VARCHAR}");
        }
        
        if (record.getCardId() != null) {
            sql.VALUES("card_id", "#{cardId,jdbcType=VARCHAR}");
        }
        
        if (record.getEmail() != null) {
            sql.VALUES("email", "#{email,jdbcType=VARCHAR}");
        }
        
        if (record.getIsReadcard() != null) {
            sql.VALUES("is_readcard", "#{isReadcard,jdbcType=SMALLINT}");
        }
        
        if (record.getPassword() != null) {
            sql.VALUES("password", "#{password,jdbcType=VARCHAR}");
        }
        
        if (record.getPwdSaveLevel() != null) {
            sql.VALUES("pwd_save_level", "#{pwdSaveLevel,jdbcType=SMALLINT}");
        }
        
        if (record.getRealname() != null) {
            sql.VALUES("realname", "#{realname,jdbcType=VARCHAR}");
        }
        
        if (record.getRegTime() != null) {
            sql.VALUES("reg_time", "#{regTime,jdbcType=VARCHAR}");
        }
        
        if (record.getRemark() != null) {
            sql.VALUES("remark", "#{remark,jdbcType=VARCHAR}");
        }
        
        if (record.getCarType() != null) {
            sql.VALUES("car_type", "#{carType,jdbcType=INTEGER}");
        }
        
        if (record.getPhone() != null) {
            sql.VALUES("phone", "#{phone,jdbcType=VARCHAR}");
        }
        
        if (record.getIdCard() != null) {
            sql.VALUES("id_card", "#{idCard,jdbcType=VARCHAR}");
        }
        
        if (record.getStatus() != null) {
            sql.VALUES("status", "#{status,jdbcType=TINYINT}");
        }
        
        if (record.getIsCheckName() != null) {
            sql.VALUES("is_check_name", "#{isCheckName,jdbcType=TINYINT}");
        }
        
        if (record.getLockStatus() != null) {
            sql.VALUES("lock_status", "#{lockStatus,jdbcType=INTEGER}");
        }
        
        if (record.getType() != null) {
            sql.VALUES("type", "#{type,jdbcType=INTEGER}");
        }
        
        if (record.getAutoRenew() != null) {
            sql.VALUES("auto_renew", "#{autoRenew,jdbcType=INTEGER}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_member
     *
     * @mbg.generated
     */
    public String selectByExample(TMemberCriteria example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("id");
        } else {
            sql.SELECT("id");
        }
        sql.SELECT("account");
        sql.SELECT("balance");
        sql.SELECT("car_color");
        sql.SELECT("car_engine_num");
        sql.SELECT("car_identi_num");
        sql.SELECT("car_plate");
        sql.SELECT("card_code");
        sql.SELECT("card_cvv");
        sql.SELECT("card_id");
        sql.SELECT("email");
        sql.SELECT("is_readcard");
        sql.SELECT("password");
        sql.SELECT("pwd_save_level");
        sql.SELECT("realname");
        sql.SELECT("reg_time");
        sql.SELECT("remark");
        sql.SELECT("car_type");
        sql.SELECT("phone");
        sql.SELECT("id_card");
        sql.SELECT("status");
        sql.SELECT("is_check_name");
        sql.SELECT("lock_status");
        sql.SELECT("type");
        sql.SELECT("auto_renew");
        sql.FROM("t_member");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_member
     *
     * @mbg.generated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        TMember record = (TMember) parameter.get("record");
        TMemberCriteria example = (TMemberCriteria) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("t_member");
        
        if (record.getId() != null) {
            sql.SET("id = #{record.id,jdbcType=INTEGER}");
        }
        
        if (record.getAccount() != null) {
            sql.SET("account = #{record.account,jdbcType=VARCHAR}");
        }
        
        if (record.getBalance() != null) {
            sql.SET("balance = #{record.balance,jdbcType=DOUBLE}");
        }
        
        if (record.getCarColor() != null) {
            sql.SET("car_color = #{record.carColor,jdbcType=VARCHAR}");
        }
        
        if (record.getCarEngineNum() != null) {
            sql.SET("car_engine_num = #{record.carEngineNum,jdbcType=VARCHAR}");
        }
        
        if (record.getCarIdentiNum() != null) {
            sql.SET("car_identi_num = #{record.carIdentiNum,jdbcType=VARCHAR}");
        }
        
        if (record.getCarPlate() != null) {
            sql.SET("car_plate = #{record.carPlate,jdbcType=VARCHAR}");
        }
        
        if (record.getCardCode() != null) {
            sql.SET("card_code = #{record.cardCode,jdbcType=VARCHAR}");
        }
        
        if (record.getCardCvv() != null) {
            sql.SET("card_cvv = #{record.cardCvv,jdbcType=VARCHAR}");
        }
        
        if (record.getCardId() != null) {
            sql.SET("card_id = #{record.cardId,jdbcType=VARCHAR}");
        }
        
        if (record.getEmail() != null) {
            sql.SET("email = #{record.email,jdbcType=VARCHAR}");
        }
        
        if (record.getIsReadcard() != null) {
            sql.SET("is_readcard = #{record.isReadcard,jdbcType=SMALLINT}");
        }
        
        if (record.getPassword() != null) {
            sql.SET("password = #{record.password,jdbcType=VARCHAR}");
        }
        
        if (record.getPwdSaveLevel() != null) {
            sql.SET("pwd_save_level = #{record.pwdSaveLevel,jdbcType=SMALLINT}");
        }
        
        if (record.getRealname() != null) {
            sql.SET("realname = #{record.realname,jdbcType=VARCHAR}");
        }
        
        if (record.getRegTime() != null) {
            sql.SET("reg_time = #{record.regTime,jdbcType=VARCHAR}");
        }
        
        if (record.getRemark() != null) {
            sql.SET("remark = #{record.remark,jdbcType=VARCHAR}");
        }
        
        if (record.getCarType() != null) {
            sql.SET("car_type = #{record.carType,jdbcType=INTEGER}");
        }
        
        if (record.getPhone() != null) {
            sql.SET("phone = #{record.phone,jdbcType=VARCHAR}");
        }
        
        if (record.getIdCard() != null) {
            sql.SET("id_card = #{record.idCard,jdbcType=VARCHAR}");
        }
        
        if (record.getStatus() != null) {
            sql.SET("status = #{record.status,jdbcType=TINYINT}");
        }
        
        if (record.getIsCheckName() != null) {
            sql.SET("is_check_name = #{record.isCheckName,jdbcType=TINYINT}");
        }
        
        if (record.getLockStatus() != null) {
            sql.SET("lock_status = #{record.lockStatus,jdbcType=INTEGER}");
        }
        
        if (record.getType() != null) {
            sql.SET("type = #{record.type,jdbcType=INTEGER}");
        }
        
        if (record.getAutoRenew() != null) {
            sql.SET("auto_renew = #{record.autoRenew,jdbcType=INTEGER}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_member
     *
     * @mbg.generated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("t_member");
        
        sql.SET("id = #{record.id,jdbcType=INTEGER}");
        sql.SET("account = #{record.account,jdbcType=VARCHAR}");
        sql.SET("balance = #{record.balance,jdbcType=DOUBLE}");
        sql.SET("car_color = #{record.carColor,jdbcType=VARCHAR}");
        sql.SET("car_engine_num = #{record.carEngineNum,jdbcType=VARCHAR}");
        sql.SET("car_identi_num = #{record.carIdentiNum,jdbcType=VARCHAR}");
        sql.SET("car_plate = #{record.carPlate,jdbcType=VARCHAR}");
        sql.SET("card_code = #{record.cardCode,jdbcType=VARCHAR}");
        sql.SET("card_cvv = #{record.cardCvv,jdbcType=VARCHAR}");
        sql.SET("card_id = #{record.cardId,jdbcType=VARCHAR}");
        sql.SET("email = #{record.email,jdbcType=VARCHAR}");
        sql.SET("is_readcard = #{record.isReadcard,jdbcType=SMALLINT}");
        sql.SET("password = #{record.password,jdbcType=VARCHAR}");
        sql.SET("pwd_save_level = #{record.pwdSaveLevel,jdbcType=SMALLINT}");
        sql.SET("realname = #{record.realname,jdbcType=VARCHAR}");
        sql.SET("reg_time = #{record.regTime,jdbcType=VARCHAR}");
        sql.SET("remark = #{record.remark,jdbcType=VARCHAR}");
        sql.SET("car_type = #{record.carType,jdbcType=INTEGER}");
        sql.SET("phone = #{record.phone,jdbcType=VARCHAR}");
        sql.SET("id_card = #{record.idCard,jdbcType=VARCHAR}");
        sql.SET("status = #{record.status,jdbcType=TINYINT}");
        sql.SET("is_check_name = #{record.isCheckName,jdbcType=TINYINT}");
        sql.SET("lock_status = #{record.lockStatus,jdbcType=INTEGER}");
        sql.SET("type = #{record.type,jdbcType=INTEGER}");
        sql.SET("auto_renew = #{record.autoRenew,jdbcType=INTEGER}");
        
        TMemberCriteria example = (TMemberCriteria) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_member
     *
     * @mbg.generated
     */
    public String updateByPrimaryKeySelective(TMember record) {
        SQL sql = new SQL();
        sql.UPDATE("t_member");
        
        if (record.getAccount() != null) {
            sql.SET("account = #{account,jdbcType=VARCHAR}");
        }
        
        if (record.getBalance() != null) {
            sql.SET("balance = #{balance,jdbcType=DOUBLE}");
        }
        
        if (record.getCarColor() != null) {
            sql.SET("car_color = #{carColor,jdbcType=VARCHAR}");
        }
        
        if (record.getCarEngineNum() != null) {
            sql.SET("car_engine_num = #{carEngineNum,jdbcType=VARCHAR}");
        }
        
        if (record.getCarIdentiNum() != null) {
            sql.SET("car_identi_num = #{carIdentiNum,jdbcType=VARCHAR}");
        }
        
        if (record.getCarPlate() != null) {
            sql.SET("car_plate = #{carPlate,jdbcType=VARCHAR}");
        }
        
        if (record.getCardCode() != null) {
            sql.SET("card_code = #{cardCode,jdbcType=VARCHAR}");
        }
        
        if (record.getCardCvv() != null) {
            sql.SET("card_cvv = #{cardCvv,jdbcType=VARCHAR}");
        }
        
        if (record.getCardId() != null) {
            sql.SET("card_id = #{cardId,jdbcType=VARCHAR}");
        }
        
        if (record.getEmail() != null) {
            sql.SET("email = #{email,jdbcType=VARCHAR}");
        }
        
        if (record.getIsReadcard() != null) {
            sql.SET("is_readcard = #{isReadcard,jdbcType=SMALLINT}");
        }
        
        if (record.getPassword() != null) {
            sql.SET("password = #{password,jdbcType=VARCHAR}");
        }
        
        if (record.getPwdSaveLevel() != null) {
            sql.SET("pwd_save_level = #{pwdSaveLevel,jdbcType=SMALLINT}");
        }
        
        if (record.getRealname() != null) {
            sql.SET("realname = #{realname,jdbcType=VARCHAR}");
        }
        
        if (record.getRegTime() != null) {
            sql.SET("reg_time = #{regTime,jdbcType=VARCHAR}");
        }
        
        if (record.getRemark() != null) {
            sql.SET("remark = #{remark,jdbcType=VARCHAR}");
        }
        
        if (record.getCarType() != null) {
            sql.SET("car_type = #{carType,jdbcType=INTEGER}");
        }
        
        if (record.getPhone() != null) {
            sql.SET("phone = #{phone,jdbcType=VARCHAR}");
        }
        
        if (record.getIdCard() != null) {
            sql.SET("id_card = #{idCard,jdbcType=VARCHAR}");
        }
        
        if (record.getStatus() != null) {
            sql.SET("status = #{status,jdbcType=TINYINT}");
        }
        
        if (record.getIsCheckName() != null) {
            sql.SET("is_check_name = #{isCheckName,jdbcType=TINYINT}");
        }
        
        if (record.getLockStatus() != null) {
            sql.SET("lock_status = #{lockStatus,jdbcType=INTEGER}");
        }
        
        if (record.getType() != null) {
            sql.SET("type = #{type,jdbcType=INTEGER}");
        }
        
        if (record.getAutoRenew() != null) {
            sql.SET("auto_renew = #{autoRenew,jdbcType=INTEGER}");
        }
        
        sql.WHERE("id = #{id,jdbcType=INTEGER}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_member
     *
     * @mbg.generated
     */
    protected void applyWhere(SQL sql, TMemberCriteria example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}