package com.api.dao.sqlProvider;

import com.api.entity.TParkStatistics;
import com.api.entity.TParkStatisticsCriteria;
import com.api.entity.TParkStatisticsCriteria.Criteria;
import com.api.entity.TParkStatisticsCriteria.Criterion;
import org.apache.ibatis.jdbc.SQL;

import java.util.List;
import java.util.Map;

public class TParkStatisticsSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_park_statistics
     *
     * @mbg.generated
     */
    public String countByExample(TParkStatisticsCriteria example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("t_park_statistics");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_park_statistics
     *
     * @mbg.generated
     */
    public String deleteByExample(TParkStatisticsCriteria example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("t_park_statistics");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_park_statistics
     *
     * @mbg.generated
     */
    public String insertSelective(TParkStatistics record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("t_park_statistics");
        
        if (record.getId() != null) {
            sql.VALUES("id", "#{id,jdbcType=INTEGER}");
        }
        
        if (record.getParkId() != null) {
            sql.VALUES("park_id", "#{parkId,jdbcType=INTEGER}");
        }
        
        if (record.getParkName() != null) {
            sql.VALUES("park_name", "#{parkName,jdbcType=VARCHAR}");
        }
        
        if (record.getEntranceFlow() != null) {
            sql.VALUES("entrance_flow", "#{entranceFlow,jdbcType=INTEGER}");
        }
        
        if (record.getOutboundFlow() != null) {
            sql.VALUES("outbound_flow", "#{outboundFlow,jdbcType=INTEGER}");
        }
        
        if (record.getTotalpayfee() != null) {
            sql.VALUES("totalPayFee", "#{totalpayfee,jdbcType=DOUBLE}");
        }
        
        if (record.getTotalpaynum() != null) {
            sql.VALUES("totalPayNum", "#{totalpaynum,jdbcType=INTEGER}");
        }
        
        if (record.getUnionpayfee() != null) {
            sql.VALUES("unionPayFee", "#{unionpayfee,jdbcType=DOUBLE}");
        }
        
        if (record.getUnionpaynum() != null) {
            sql.VALUES("unionPayNum", "#{unionpaynum,jdbcType=INTEGER}");
        }
        
        if (record.getUnionpayqrfee() != null) {
            sql.VALUES("unionPayQRFee", "#{unionpayqrfee,jdbcType=DOUBLE}");
        }
        
        if (record.getUnionpayqrnum() != null) {
            sql.VALUES("unionPayQRNum", "#{unionpayqrnum,jdbcType=INTEGER}");
        }
        
        if (record.getUnionpaypassfee() != null) {
            sql.VALUES("unionPayPassFee", "#{unionpaypassfee,jdbcType=DOUBLE}");
        }
        
        if (record.getUnionpaypassnum() != null) {
            sql.VALUES("unionPayPassNum", "#{unionpaypassnum,jdbcType=INTEGER}");
        }
        
        if (record.getCloudfee() != null) {
            sql.VALUES("cloudFee", "#{cloudfee,jdbcType=DOUBLE}");
        }
        
        if (record.getCloudnum() != null) {
            sql.VALUES("cloudNum", "#{cloudnum,jdbcType=INTEGER}");
        }
        
        if (record.getAnnualGoals() != null) {
            sql.VALUES("annual_goals", "#{annualGoals,jdbcType=INTEGER}");
        }
        
        if (record.getParkSpacesTotal() != null) {
            sql.VALUES("park_spaces_total", "#{parkSpacesTotal,jdbcType=INTEGER}");
        }
        
        if (record.getParkSpacesFree() != null) {
            sql.VALUES("park_spaces_free", "#{parkSpacesFree,jdbcType=INTEGER}");
        }
        
        if (record.getParkSpacesOcc() != null) {
            sql.VALUES("park_spaces_occ", "#{parkSpacesOcc,jdbcType=INTEGER}");
        }
        
        if (record.getPriceAve() != null) {
            sql.VALUES("price_ave", "#{priceAve,jdbcType=DOUBLE}");
        }
        
        if (record.getEntranceFlowAve() != null) {
            sql.VALUES("entrance_flow_ave", "#{entranceFlowAve,jdbcType=DOUBLE}");
        }
        
        if (record.getOutboundFlowAve() != null) {
            sql.VALUES("outbound_flow_ave", "#{outboundFlowAve,jdbcType=DOUBLE}");
        }
        
        if (record.getTurnoverAve() != null) {
            sql.VALUES("turnover_ave", "#{turnoverAve,jdbcType=DOUBLE}");
        }
        
        if (record.getUsageRate() != null) {
            sql.VALUES("usage_rate", "#{usageRate,jdbcType=DOUBLE}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.VALUES("update_time", "#{updateTime,jdbcType=VARCHAR}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_park_statistics
     *
     * @mbg.generated
     */
    public String selectByExample(TParkStatisticsCriteria example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("id");
        } else {
            sql.SELECT("id");
        }
        sql.SELECT("park_id");
        sql.SELECT("park_name");
        sql.SELECT("entrance_flow");
        sql.SELECT("outbound_flow");
        sql.SELECT("totalPayFee");
        sql.SELECT("totalPayNum");
        sql.SELECT("unionPayFee");
        sql.SELECT("unionPayNum");
        sql.SELECT("unionPayQRFee");
        sql.SELECT("unionPayQRNum");
        sql.SELECT("unionPayPassFee");
        sql.SELECT("unionPayPassNum");
        sql.SELECT("cloudFee");
        sql.SELECT("cloudNum");
        sql.SELECT("annual_goals");
        sql.SELECT("park_spaces_total");
        sql.SELECT("park_spaces_free");
        sql.SELECT("park_spaces_occ");
        sql.SELECT("price_ave");
        sql.SELECT("entrance_flow_ave");
        sql.SELECT("outbound_flow_ave");
        sql.SELECT("turnover_ave");
        sql.SELECT("usage_rate");
        sql.SELECT("update_time");
        sql.FROM("t_park_statistics");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_park_statistics
     *
     * @mbg.generated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        TParkStatistics record = (TParkStatistics) parameter.get("record");
        TParkStatisticsCriteria example = (TParkStatisticsCriteria) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("t_park_statistics");
        
        if (record.getId() != null) {
            sql.SET("id = #{record.id,jdbcType=INTEGER}");
        }
        
        if (record.getParkId() != null) {
            sql.SET("park_id = #{record.parkId,jdbcType=INTEGER}");
        }
        
        if (record.getParkName() != null) {
            sql.SET("park_name = #{record.parkName,jdbcType=VARCHAR}");
        }
        
        if (record.getEntranceFlow() != null) {
            sql.SET("entrance_flow = #{record.entranceFlow,jdbcType=INTEGER}");
        }
        
        if (record.getOutboundFlow() != null) {
            sql.SET("outbound_flow = #{record.outboundFlow,jdbcType=INTEGER}");
        }
        
        if (record.getTotalpayfee() != null) {
            sql.SET("totalPayFee = #{record.totalpayfee,jdbcType=DOUBLE}");
        }
        
        if (record.getTotalpaynum() != null) {
            sql.SET("totalPayNum = #{record.totalpaynum,jdbcType=INTEGER}");
        }
        
        if (record.getUnionpayfee() != null) {
            sql.SET("unionPayFee = #{record.unionpayfee,jdbcType=DOUBLE}");
        }
        
        if (record.getUnionpaynum() != null) {
            sql.SET("unionPayNum = #{record.unionpaynum,jdbcType=INTEGER}");
        }
        
        if (record.getUnionpayqrfee() != null) {
            sql.SET("unionPayQRFee = #{record.unionpayqrfee,jdbcType=DOUBLE}");
        }
        
        if (record.getUnionpayqrnum() != null) {
            sql.SET("unionPayQRNum = #{record.unionpayqrnum,jdbcType=INTEGER}");
        }
        
        if (record.getUnionpaypassfee() != null) {
            sql.SET("unionPayPassFee = #{record.unionpaypassfee,jdbcType=DOUBLE}");
        }
        
        if (record.getUnionpaypassnum() != null) {
            sql.SET("unionPayPassNum = #{record.unionpaypassnum,jdbcType=INTEGER}");
        }
        
        if (record.getCloudfee() != null) {
            sql.SET("cloudFee = #{record.cloudfee,jdbcType=DOUBLE}");
        }
        
        if (record.getCloudnum() != null) {
            sql.SET("cloudNum = #{record.cloudnum,jdbcType=INTEGER}");
        }
        
        if (record.getAnnualGoals() != null) {
            sql.SET("annual_goals = #{record.annualGoals,jdbcType=INTEGER}");
        }
        
        if (record.getParkSpacesTotal() != null) {
            sql.SET("park_spaces_total = #{record.parkSpacesTotal,jdbcType=INTEGER}");
        }
        
        if (record.getParkSpacesFree() != null) {
            sql.SET("park_spaces_free = #{record.parkSpacesFree,jdbcType=INTEGER}");
        }
        
        if (record.getParkSpacesOcc() != null) {
            sql.SET("park_spaces_occ = #{record.parkSpacesOcc,jdbcType=INTEGER}");
        }
        
        if (record.getPriceAve() != null) {
            sql.SET("price_ave = #{record.priceAve,jdbcType=DOUBLE}");
        }
        
        if (record.getEntranceFlowAve() != null) {
            sql.SET("entrance_flow_ave = #{record.entranceFlowAve,jdbcType=DOUBLE}");
        }
        
        if (record.getOutboundFlowAve() != null) {
            sql.SET("outbound_flow_ave = #{record.outboundFlowAve,jdbcType=DOUBLE}");
        }
        
        if (record.getTurnoverAve() != null) {
            sql.SET("turnover_ave = #{record.turnoverAve,jdbcType=DOUBLE}");
        }
        
        if (record.getUsageRate() != null) {
            sql.SET("usage_rate = #{record.usageRate,jdbcType=DOUBLE}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.SET("update_time = #{record.updateTime,jdbcType=VARCHAR}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_park_statistics
     *
     * @mbg.generated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("t_park_statistics");
        
        sql.SET("id = #{record.id,jdbcType=INTEGER}");
        sql.SET("park_id = #{record.parkId,jdbcType=INTEGER}");
        sql.SET("park_name = #{record.parkName,jdbcType=VARCHAR}");
        sql.SET("entrance_flow = #{record.entranceFlow,jdbcType=INTEGER}");
        sql.SET("outbound_flow = #{record.outboundFlow,jdbcType=INTEGER}");
        sql.SET("totalPayFee = #{record.totalpayfee,jdbcType=DOUBLE}");
        sql.SET("totalPayNum = #{record.totalpaynum,jdbcType=INTEGER}");
        sql.SET("unionPayFee = #{record.unionpayfee,jdbcType=DOUBLE}");
        sql.SET("unionPayNum = #{record.unionpaynum,jdbcType=INTEGER}");
        sql.SET("unionPayQRFee = #{record.unionpayqrfee,jdbcType=DOUBLE}");
        sql.SET("unionPayQRNum = #{record.unionpayqrnum,jdbcType=INTEGER}");
        sql.SET("unionPayPassFee = #{record.unionpaypassfee,jdbcType=DOUBLE}");
        sql.SET("unionPayPassNum = #{record.unionpaypassnum,jdbcType=INTEGER}");
        sql.SET("cloudFee = #{record.cloudfee,jdbcType=DOUBLE}");
        sql.SET("cloudNum = #{record.cloudnum,jdbcType=INTEGER}");
        sql.SET("annual_goals = #{record.annualGoals,jdbcType=INTEGER}");
        sql.SET("park_spaces_total = #{record.parkSpacesTotal,jdbcType=INTEGER}");
        sql.SET("park_spaces_free = #{record.parkSpacesFree,jdbcType=INTEGER}");
        sql.SET("park_spaces_occ = #{record.parkSpacesOcc,jdbcType=INTEGER}");
        sql.SET("price_ave = #{record.priceAve,jdbcType=DOUBLE}");
        sql.SET("entrance_flow_ave = #{record.entranceFlowAve,jdbcType=DOUBLE}");
        sql.SET("outbound_flow_ave = #{record.outboundFlowAve,jdbcType=DOUBLE}");
        sql.SET("turnover_ave = #{record.turnoverAve,jdbcType=DOUBLE}");
        sql.SET("usage_rate = #{record.usageRate,jdbcType=DOUBLE}");
        sql.SET("update_time = #{record.updateTime,jdbcType=VARCHAR}");
        
        TParkStatisticsCriteria example = (TParkStatisticsCriteria) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_park_statistics
     *
     * @mbg.generated
     */
    public String updateByPrimaryKeySelective(TParkStatistics record) {
        SQL sql = new SQL();
        sql.UPDATE("t_park_statistics");
        
        if (record.getParkId() != null) {
            sql.SET("park_id = #{parkId,jdbcType=INTEGER}");
        }
        
        if (record.getParkName() != null) {
            sql.SET("park_name = #{parkName,jdbcType=VARCHAR}");
        }
        
        if (record.getEntranceFlow() != null) {
            sql.SET("entrance_flow = #{entranceFlow,jdbcType=INTEGER}");
        }
        
        if (record.getOutboundFlow() != null) {
            sql.SET("outbound_flow = #{outboundFlow,jdbcType=INTEGER}");
        }
        
        if (record.getTotalpayfee() != null) {
            sql.SET("totalPayFee = #{totalpayfee,jdbcType=DOUBLE}");
        }
        
        if (record.getTotalpaynum() != null) {
            sql.SET("totalPayNum = #{totalpaynum,jdbcType=INTEGER}");
        }
        
        if (record.getUnionpayfee() != null) {
            sql.SET("unionPayFee = #{unionpayfee,jdbcType=DOUBLE}");
        }
        
        if (record.getUnionpaynum() != null) {
            sql.SET("unionPayNum = #{unionpaynum,jdbcType=INTEGER}");
        }
        
        if (record.getUnionpayqrfee() != null) {
            sql.SET("unionPayQRFee = #{unionpayqrfee,jdbcType=DOUBLE}");
        }
        
        if (record.getUnionpayqrnum() != null) {
            sql.SET("unionPayQRNum = #{unionpayqrnum,jdbcType=INTEGER}");
        }
        
        if (record.getUnionpaypassfee() != null) {
            sql.SET("unionPayPassFee = #{unionpaypassfee,jdbcType=DOUBLE}");
        }
        
        if (record.getUnionpaypassnum() != null) {
            sql.SET("unionPayPassNum = #{unionpaypassnum,jdbcType=INTEGER}");
        }
        
        if (record.getCloudfee() != null) {
            sql.SET("cloudFee = #{cloudfee,jdbcType=DOUBLE}");
        }
        
        if (record.getCloudnum() != null) {
            sql.SET("cloudNum = #{cloudnum,jdbcType=INTEGER}");
        }
        
        if (record.getAnnualGoals() != null) {
            sql.SET("annual_goals = #{annualGoals,jdbcType=INTEGER}");
        }
        
        if (record.getParkSpacesTotal() != null) {
            sql.SET("park_spaces_total = #{parkSpacesTotal,jdbcType=INTEGER}");
        }
        
        if (record.getParkSpacesFree() != null) {
            sql.SET("park_spaces_free = #{parkSpacesFree,jdbcType=INTEGER}");
        }
        
        if (record.getParkSpacesOcc() != null) {
            sql.SET("park_spaces_occ = #{parkSpacesOcc,jdbcType=INTEGER}");
        }
        
        if (record.getPriceAve() != null) {
            sql.SET("price_ave = #{priceAve,jdbcType=DOUBLE}");
        }
        
        if (record.getEntranceFlowAve() != null) {
            sql.SET("entrance_flow_ave = #{entranceFlowAve,jdbcType=DOUBLE}");
        }
        
        if (record.getOutboundFlowAve() != null) {
            sql.SET("outbound_flow_ave = #{outboundFlowAve,jdbcType=DOUBLE}");
        }
        
        if (record.getTurnoverAve() != null) {
            sql.SET("turnover_ave = #{turnoverAve,jdbcType=DOUBLE}");
        }
        
        if (record.getUsageRate() != null) {
            sql.SET("usage_rate = #{usageRate,jdbcType=DOUBLE}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.SET("update_time = #{updateTime,jdbcType=VARCHAR}");
        }
        
        sql.WHERE("id = #{id,jdbcType=INTEGER}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_park_statistics
     *
     * @mbg.generated
     */
    protected void applyWhere(SQL sql, TParkStatisticsCriteria example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}